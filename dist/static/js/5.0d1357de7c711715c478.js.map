{"version":3,"sources":["webpack:///static/js/5.0d1357de7c711715c478.js","webpack:///./src/components/articleComment.vue?0233","webpack:///./src/views/articleDetail.vue?7864","webpack:///./src/components/articleComment.vue?2130","webpack:///./src/views/articleDetail.vue?0b53","webpack:///./src/components/articleComment.vue","webpack:///./src/views/articleDetail.vue","webpack:///src/components/articleComment.vue","webpack:///./src/components/articleComment.vue?6360","webpack:///src/views/articleDetail.vue","webpack:///./src/views/articleDetail.vue?08ca","webpack:///./node_modules/wangeditor/release/wangEditor.js"],"names":["webpackJsonp","1cFQ","module","exports","__webpack_require__","content","i","locals","2ePM","push","version","sources","names","mappings","file","sourcesContent","sourceRoot","3b5Z","Rpzr","Y1VG","__webpack_exports__","injectStyle","ssrContext","articleDetail_injectStyle","Object","defineProperty","value","axiosService","header","moment","moment_default","n","articleComment","name","components","data","allcomments","commentQuantity","loading","showDBtn","reply","showRB","props","created","this","loginStatic","username","getComments","methods","sReplyBlock","index","a","document","getElementsByClassName","style","display","comment","x","undefined","articleReply","uid","cid","_this","post","then","res","sucMessage","catch","error","console","log","toUserDetail","$router","path","Published","that","aid","req","$message","message","type","duration","data2","getComment","forEach","item","tmp","aReply","rItem","id","replys","tmpData","sortCreateTime","b","createdAt","sort","format","length","setInterval","deleteComment","_this2","$confirm","confirmButtonText","cancelButtonText","editMyA","deleteMyA","_this3","render","_vm","_h","$createElement","_c","_self","directives","rawName","expression","staticClass","on","click","$event","_v","_s","staticStyle","width","attrs","disabled","isLogin","nativeOn","keyup","_k","keyCode","key","model","callback","$$v","_l","cursor","src","upic","split","margin-left","staticRenderFns","esExports","components_articleComment","normalizeComponent","__vue_styles__","Component","src_components_articleComment","articleDetail","$route","params","title","isFavorite","dialogVisible","myHeader","required","privateMessageData","exameFavoriteArticle","tmpDate","addFavoriteArticle","deleteFavoriteArticle","articleDetail_render","background","to","font-weight","alt","domProps","innerHTML","visible","update:visible","color","slot","articleDetail_staticRenderFns","articleDetail_esExports","views_articleDetail","articleDetail_normalizeComponent","articleDetail___vue_styles__","articleDetail_Component","sYY+","global","factory","createElemByHTML","html","div","createElement","children","isDOMList","selector","HTMLCollection","NodeList","querySelectorAll","result","DomElement","nodeType","selectorResult","Array","replace","trim","indexOf","$","objForEach","obj","fn","hasOwnProperty","call","arrForEach","fakeArr","getRandom","prefix","Math","random","toString","slice","replaceHtmlSymbol","isFunction","Bold","editor","$elem","_active","DropList","menu","opt","$container","$title","titleHtml","replaceLang","addClass","append","list","onClick","_emptyFn","$list","elemHtml","$li","e","hideTimeoutId","setTimeout","hide","_rendered","_show","Head","droplist","_command","FontSize","FontName","config","fontNames","map","fontName","Panel","Link","Italic","Redo","StrikeThrough","Underline","Undo","List","Justify","ForeColor","colors","BackColor","Quote","Code","Emoticon","Table","Video","Image","imgMenuId","Menus","menus","getPasteText","clipboardData","originalEvent","pasteText","window","getData","getPasteHtml","filterStyle","ignoreImg","pasteHtml","docSplitHtml","getPasteImgs","items","test","getAsFile","getChildrenJSON","childNodes","curElem","elemResult","textContent","tag","nodeName","toLowerCase","attrData","attrList","attributes","attrListLength","attr","Text","Command","API","_currentRange","Progress","_time","_isShow","_isRender","_timeoutId","$textContainer","$textContainerElem","$bar","UploadImg","Editor","toolbarSelector","textSelector","Error","editorId","customConfig","eventList","prototype","constructor","elem","clone","deep","cloneList","cloneNode","get","first","last","types","addEventListener","target","matches","off","removeEventListener","val","getAttribute","setAttribute","className","arr","filter","join","removeClass","css","currentStyle","styleArr","resultArr","show","$children","child","appendChild","remove","parent","parentElement","removeChild","isContain","$child","contains","getSizeData","getBoundingClientRect","getNodeName","find","text","focus","parentUntil","_currentElem","results","equal","insertBefore","$referenceNode","referenceNode","parentNode","insertAfter","lastChild","nextSibling","offAll","emotions","zIndex","debug","linkCheck","link","linkImgCheck","pasteFilterStyle","pasteIgnoreImg","pasteTextHandle","showLinkImg","linkImgCallback","url","uploadImgMaxSize","uploadImgShowBase64","uploadFileName","uploadImgParams","uploadImgHeaders","withCredentials","uploadImgTimeout","uploadImgHooks","before","xhr","files","success","fail","timeout","qiniu","UA","_ua","navigator","userAgent","isWebkit","isIE","isSeleEmpty","selection","isSelectionEmpty","createEmptyRange","cmd","do","collapseRange","restoreSelection","tryChangeActive","queryCommandState","str","langArgs","reg","clearTimeout","$menuELem","menuHeight","height","showTimeoutId","$selectionElem","getSelectionContainerElem","$textElem","cmdValue","queryCommandValue","emptyFn","_isCreatedPanelMenus","$body","$closeBtn","$tabTitleContainer","$tabContentContainer","tabs","tabTitleArr","tabContentArr","tab","tabIndex","tpl","$content","_index","stopPropagation","events","event","$inputs","_hideOtherPanels","panel","$linkelem","createRangeByElem","_createPanel","getSelectionText","inputLinkId","inputTextId","btnOkId","btnDelId","delBtnDisplay","$link","$text","_insertLink","_delLink","selectionText","checkResult","alert","$selectionELem","$parent","$targetELem","$startElem","getSelectionStartElem","$endElem","getSelectionEndElem","$code","textId","btnId","_insertCode","_updateCode","$parentElem","tabConfig","emotData","emotType","faceHtml","$target","insertHtml","_insert","emotHtml","_createEditPanel","_createInsertPanel","btnInsertId","textRowNum","textColNum","rowNum","parseInt","colNum","r","c","addRowBtnId","addColBtnId","delRowBtnId","delColBtnId","delTableBtnId","_addRow","_addCol","_delRow","_delCol","_delTable","_getLocationData","$tr","$tds","tdLength","td","$tbody","$trs","trLength","tr","locationData","trData","$currentTr","tdData","newTr","tdIndex","$currentTd","$table","textValId","width30","width50","width100","delBtn","tabsConfig","$img","_selectedImg","uploadImg","upTriggerId","upFileId","linkUrlId","linkBtnId","$file","fileElem","fileList","$linkUrl","insertLinkImg","tabsConfigResult","uploadImgServer","customUploadImg","FileReader","MenuConstructors","bold","head","fontSize","italic","redo","strikeThrough","underline","undo","justify","foreColor","backColor","quote","code","emoticon","table","video","image","init","menuKey","MenuConstructor","_addToToolbar","_bindEvent","$toolbarElem","getRange","changeActive","clear","initSelection","getJSON","_saveRangeRealTime","_enterKeyHandle","_clearHandle","_pasteHandle","_tabHandle","_imgHandle","_dragHandle","saveRange","insertEmptyP","$p","pHandle","codeHandle","selectionNodeName","parentNodeName","queryCommandSupported","_willBreakCode","preventDefault","_startOffset","startOffset","codeLength","txtHtml","canDo","now","Date","flag","pasteTime","resetTime","ex","pasteFiles","img","dataTransfer","_useStyleWithCSS","execCommand","_name","_execCommand","change","_insertHTML","range","insertNode","deleteContents","pasteHTML","_insertElem","_range","getSelection","rangeCount","getRangeAt","$containerElem","toStart","collapse","commonAncestorContainer","startContainer","endContainer","endOffset","removeAllRanges","addRange","setEnd","isContent","createRange","selectNodeContents","selectNode","progress","timeoutId","_hide","_typeof","Symbol","iterator","_alert","alertInfo","debugInfo","customAlert","onload","onerror","onabort","maxSize","maxSizeM","maxLength","uploadImgMaxLength","uploadImgParamsWithUrl","hooks","resultFiles","errInfo","size","bind","formdata","FormData","uploadImgServerArr","uploadImgServerHash","XMLHttpRequest","open","ontimeout","upload","onprogress","percent","progressBar","lengthComputable","loaded","total","onreadystatechange","readyState","status","responseText","JSON","parse","customInsert","errno","beforeResult","prevent","msg","setRequestHeader","send","reader","readAsDataURL","_initConfig","assign","langConfig","lang","RegExp","_initDom","$toolbarSelector","config$$1","toolbarElemId","textElemId","compositionEnd","onfocus","onblur","isFocus","isChild","isToolbar","isMenu","_initCommand","_initSelectionAPI","_initUploadImg","_initMenus","_initText","txt","newLine","$last","onChangeTimeoutId","beforeChangeHtml","onchangeTimeout","onchange","currentHtml","create","_offAllEvent","varArgs","TypeError","arguments","nextSource","nextKey","Element","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","ownerDocument","getElementsByTagName","wangEditor"],"mappings":"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","file":"static/js/5.0d1357de7c711715c478.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ \"1cFQ\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"3b5Z\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"a3481000\", content, true, {});\n\n/***/ }),\n\n/***/ \"2ePM\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".article_detail_content[data-v-146dbb7c]{width:800px;margin:0 auto;padding-bottom:30px}.title[data-v-146dbb7c]{margin:0 auto;padding-top:20px;font-size:30px}.article_detail_main[data-v-146dbb7c]{margin-bottom:40px;padding-bottom:30px;border-bottom:1px solid #e6e6e6}.content[data-v-146dbb7c]{line-height:2.5}.content>figure[data-v-146dbb7c]{display:none!important}.article_detail_writer_pic[data-v-146dbb7c]{height:45px;width:45px;border-radius:50%;cursor:pointer}.article_detail_writer[data-v-146dbb7c]{position:relative;margin:30px 0}.article_detail_writer_name[data-v-146dbb7c]{position:absolute;left:60px;top:15px;font-size:16px;color:#999}.articleFavorite[data-v-146dbb7c]{position:absolute;right:0;top:-60px;cursor:pointer;color:gray}.articleFavorite_icon[data-v-146dbb7c]{font-size:24px}\", \"\", {\"version\":3,\"sources\":[\"D:/YuYan/src/views/articleDetail.vue\"],\"names\":[],\"mappings\":\"AACA,yCACI,YAAa,AACb,cAAe,AACf,mBAAqB,CACxB,AACD,wBACI,cAAe,AACf,iBAAkB,AAClB,cAAe,CAClB,AACD,sCACI,mBAAoB,AACpB,oBAAqB,AACrB,+BAAiC,CACpC,AACD,0BACI,eAAiB,CACpB,AACD,iCACI,sBAAwB,CAC3B,AACD,4CACI,YAAa,AACb,WAAY,AACZ,kBAAmB,AACnB,cAAgB,CACnB,AACD,wCACI,kBAAmB,AACnB,aAAe,CAClB,AACD,6CACI,kBAAmB,AACnB,UAAW,AACX,SAAU,AACV,eAAgB,AAChB,UAAY,CACf,AACD,kCACI,kBAAmB,AACnB,QAAW,AACX,UAAW,AACX,eAAgB,AAChB,UAAY,CACf,AACD,uCACI,cAAgB,CACnB\",\"file\":\"articleDetail.vue\",\"sourcesContent\":[\"\\n.article_detail_content[data-v-146dbb7c] {\\n    width: 800px;\\n    margin: 0 auto;\\n    padding-bottom: 30px;\\n}\\n.title[data-v-146dbb7c] {\\n    margin: 0 auto;\\n    padding-top: 20px;\\n    font-size: 30px\\n}\\n.article_detail_main[data-v-146dbb7c] {\\n    margin-bottom: 40px;\\n    padding-bottom: 30px;\\n    border-bottom: 1px solid #e6e6e6;\\n}\\n.content[data-v-146dbb7c] {\\n    line-height: 2.5;\\n}\\n.content>figure[data-v-146dbb7c] {\\n    display: none !important\\n}\\n.article_detail_writer_pic[data-v-146dbb7c] {\\n    height: 45px;\\n    width: 45px;\\n    border-radius: 50%;\\n    cursor: pointer;\\n}\\n.article_detail_writer[data-v-146dbb7c] {\\n    position: relative;\\n    margin: 30px 0;\\n}\\n.article_detail_writer_name[data-v-146dbb7c] {\\n    position: absolute;\\n    left: 60px;\\n    top: 15px;\\n    font-size: 16px;\\n    color: #999;\\n}\\n.articleFavorite[data-v-146dbb7c] {\\n    position: absolute;\\n    right: 0px;\\n    top: -60px;\\n    cursor: pointer;\\n    color: gray;\\n}\\n.articleFavorite_icon[data-v-146dbb7c] {\\n    font-size: 24px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"3b5Z\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")(true);\n// imports\n\n\n// module\nexports.push([module.i, \".replyBlock{margin-bottom:10px;margin-top:20px}.replysBlock{margin:10px 0 10px 50px;background:#f5f5f5}.replyItem{padding:10px}.replyItem b{color:#0f88eb;cursor:pointer}.replyItem span{color:#999;float:right}.article_comment_block{margin:15px 0;border-bottom:1px solid rgba(0,0,0,.1);position:relative}.article_comment_block_user{position:relative}.aReply{position:absolute;right:20px;bottom:-30px;cursor:pointer}.aReply:hover{color:#0f88eb;-webkit-transition:.3s;transition:.3s}.article_comment_block_user img{height:40px;width:40px;border-radius:50%}.username{position:absolute;top:0;left:60px;font-weight:700}.article_comments_content{position:absolute;top:25px;left:60px}.article_comment_block_time{color:gray;font-size:14px;margin:10px 0}.article_comments_head{margin:40px 0;padding-left:20px;border-left:5px solid gray;font-weight:700}.writeComment{margin-bottom:30px}.article_comments{padding-bottom:100px}.deleteBtn{position:absolute;cursor:pointer;bottom:-30px;right:70px}.deleteMyArticle,.editMyArticle{position:absolute;top:20px;cursor:pointer;font-weight:700}.editMyArticle{right:300px}.deleteMyArticle{right:350px}\", \"\", {\"version\":3,\"sources\":[\"D:/YuYan/src/components/articleComment.vue\"],\"names\":[],\"mappings\":\"AACA,YACE,mBAAoB,AACpB,eAAiB,CAClB,AACD,aACE,wBAAyB,AACzB,kBAAoB,CACrB,AACD,WACE,YAAc,CACf,AACD,aACE,cAAe,AACf,cAAgB,CACjB,AACD,gBACE,WAAY,AACZ,WAAa,CACd,AACD,uBACE,cAAe,AACf,uCAA4C,AAC5C,iBAAmB,CACpB,AACD,4BACE,iBAAmB,CACpB,AACD,QACE,kBAAmB,AACnB,WAAY,AACZ,aAAc,AACd,cAAgB,CACjB,AACD,cACE,cAAe,AACf,uBAAyB,AACzB,cAAiB,CAClB,AACD,gCACE,YAAa,AACb,WAAY,AACZ,iBAAmB,CACpB,AACD,UACE,kBAAmB,AACnB,MAAS,AACT,UAAW,AACX,eAAiB,CAClB,AACD,0BACE,kBAAmB,AACnB,SAAU,AACV,SAAW,CACZ,AACD,4BACE,WAAY,AACZ,eAAgB,AAChB,aAAe,CAChB,AACD,uBACE,cAAe,AACf,kBAAmB,AAGnB,2BAA4B,AAC5B,eAAiB,CAHlB,AAKD,cACE,kBAAoB,CACrB,AACD,kBACE,oBAAsB,CACvB,AACD,WACE,kBAAmB,AACnB,eAAgB,AAChB,aAAc,AACd,UAAY,CACb,AACD,gCAEE,kBAAmB,AACnB,SAAU,AACV,eAAgB,AAChB,eAAiB,CAClB,AACD,eACE,WAAa,CACd,AACD,iBACE,WAAa,CACd\",\"file\":\"articleComment.vue\",\"sourcesContent\":[\"\\n.replyBlock {\\r\\n  margin-bottom: 10px;\\r\\n  margin-top: 20px;\\n}\\n.replysBlock {\\r\\n  margin: 10px 0 10px 50px;\\r\\n  background: #f5f5f5;\\n}\\n.replyItem {\\r\\n  padding: 10px;\\n}\\n.replyItem b {\\r\\n  color: #0f88eb;\\r\\n  cursor: pointer;\\n}\\n.replyItem span {\\r\\n  color: #999;\\r\\n  float: right;\\n}\\n.article_comment_block {\\r\\n  margin: 15px 0;\\r\\n  border-bottom: rgba(0, 0, 0, 0.1) solid 1px;\\r\\n  position: relative;\\n}\\n.article_comment_block_user {\\r\\n  position: relative;\\n}\\n.aReply {\\r\\n  position: absolute;\\r\\n  right: 20px;\\r\\n  bottom: -30px;\\r\\n  cursor: pointer;\\n}\\n.aReply:hover {\\r\\n  color: #0f88eb;\\r\\n  -webkit-transition: 0.3s;\\r\\n  transition: 0.3s;\\n}\\n.article_comment_block_user img {\\r\\n  height: 40px;\\r\\n  width: 40px;\\r\\n  border-radius: 50%;\\n}\\n.username {\\r\\n  position: absolute;\\r\\n  top: 0px;\\r\\n  left: 60px;\\r\\n  font-weight: 700;\\n}\\n.article_comments_content {\\r\\n  position: absolute;\\r\\n  top: 25px;\\r\\n  left: 60px;\\n}\\n.article_comment_block_time {\\r\\n  color: gray;\\r\\n  font-size: 14px;\\r\\n  margin: 10px 0;\\n}\\n.article_comments_head {\\r\\n  margin: 40px 0;\\r\\n  padding-left: 20px;\\n}\\n.article_comments_head {\\r\\n  border-left: 5px solid gray;\\r\\n  font-weight: 700;\\n}\\n.writeComment {\\r\\n  margin-bottom: 30px;\\n}\\n.article_comments {\\r\\n  padding-bottom: 100px;\\n}\\n.deleteBtn {\\r\\n  position: absolute;\\r\\n  cursor: pointer;\\r\\n  bottom: -30px;\\r\\n  right: 70px;\\n}\\n.deleteMyArticle,\\r\\n.editMyArticle {\\r\\n  position: absolute;\\r\\n  top: 20px;\\r\\n  cursor: pointer;\\r\\n  font-weight: 700;\\n}\\n.editMyArticle {\\r\\n  right: 300px;\\n}\\n.deleteMyArticle {\\r\\n  right: 350px;\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"Rpzr\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"2ePM\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"b80bfe4a\", content, true, {});\n\n/***/ }),\n\n/***/ \"Y1VG\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ./src/utils/axiosService.js\nvar axiosService = __webpack_require__(\"9/MJ\");\n\n// EXTERNAL MODULE: ./src/components/header.vue + 2 modules\nvar header = __webpack_require__(\"Cz8s\");\n\n// EXTERNAL MODULE: ./node_modules/moment/moment.js\nvar moment = __webpack_require__(\"PJh5\");\nvar moment_default = /*#__PURE__*/__webpack_require__.n(moment);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/components/articleComment.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var articleComment = ({\n  name: \"detail\",\n  components: {},\n  data: function data() {\n    return {\n      content: \"\",\n      allcomments: \"\",\n      commentQuantity: \"\",\n      loading: false,\n      showDBtn: false,\n      reply: \"\",\n      showRB: false\n    };\n  },\n\n  props: [\"loginStatic\", \"aid\", \"username\"],\n  created: function created() {\n    if (this.loginStatic.username === this.username) {\n      this.showDBtn = true;\n    }\n    this.getComments();\n  },\n\n  methods: {\n    sReplyBlock: function sReplyBlock(index) {\n      var a = document.getElementsByClassName(\"replyBlock\");\n      if (a[index].style.display === \"block\") {\n        a[index].style.display = \"none\";\n        this.comment = \"\";\n      } else {\n        for (var x in a) {\n          if (a[x].style !== undefined) {\n            a[x].style.display = \"none\";\n          }\n        }\n        a[index].style.display = \"block\";\n      }\n    },\n    articleReply: function articleReply(uid, cid) {\n      var _this = this;\n\n      var data = {\n        uid: uid,\n        reply: this.reply,\n        cid: cid\n      };\n      axiosService[\"a\" /* default */].post(\"/api/addArticleReply\", data).then(function (res) {\n        _this.reply = \"\";\n        _this.sucMessage(\"回复成功\");\n        _this.getComments();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    toUserDetail: function toUserDetail(uid) {\n      if (uid == this.loginStatic.uid) {\n        this.$router.push({\n          path: \"/personnalCenter/\" + uid + \"/me/first\"\n        });\n      } else {\n        this.$router.push({\n          path: \"/personnalCenter/\" + uid + \"/others/first\"\n        });\n      }\n    },\n    Published: function Published() {\n      var that = this;\n      var data = {\n        aid: this.aid,\n        uid: this.loginStatic.uid,\n        comment: this.content\n      };\n      axiosService[\"a\" /* default */].post(\"/api/addComment\", data).then(function (req) {\n        that.getComments();\n        that.$message({\n          message: \"评论发表成功\",\n          type: \"success\",\n          duration: 1000\n        });\n        that.content = \"\";\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    getComments: function getComments() {\n      this.loading = true;\n      var that = this;\n      var data2 = {\n        aid: this.aid\n      };\n      axiosService[\"a\" /* default */].post(\"/api/getAriticleComment\", data2).then(function (req) {\n        req.data.getComment.forEach(function (item) {\n          var tmp = [];\n          req.data.aReply.forEach(function (rItem) {\n            if (item.id === rItem.cid) {\n              tmp.push(rItem);\n            }\n          });\n          item.replys = tmp;\n        });\n        var tmpData = req.data.getComment;\n        var sortCreateTime = function sortCreateTime(a, b) {\n          return b.createdAt - a.createdAt;\n        };\n        tmpData.sort(sortCreateTime);\n        tmpData.forEach(function (item) {\n          item.createdAt = moment_default()(item.createdAt).format(\"YYYY/MM/DD hh:mm\");\n        });\n        that.commentQuantity = tmpData.length;\n        that.allcomments = tmpData;\n        setInterval(function () {\n          that.loading = false;\n        }, 500);\n      });\n    },\n    deleteComment: function deleteComment(id) {\n      var _this2 = this;\n\n      var data = {\n        id: id\n      };\n      this.$confirm(\"确定要删除这条评论吗?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        axiosService[\"a\" /* default */].post(\"/api/deleteArticleComment\", data).then(function (res) {\n          _this2.sucMessage(res.data);\n          _this2.getComments();\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }).catch(function () {\n        _this2.$message({\n          type: \"info\",\n          message: \"已取消删除\",\n          duration: 1000\n        });\n      });\n    },\n    editMyA: function editMyA(id) {\n      this.$router.push({\n        path: \"/write/\" + id\n      });\n    },\n    deleteMyA: function deleteMyA(id) {\n      var _this3 = this;\n\n      var data = {\n        id: id\n      };\n      this.$confirm(\"确定要删除这个文章吗?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        axiosService[\"a\" /* default */].post(\"/api/deleteArticle\", data).then(function (res) {\n          _this3.sucMessage(res.data);\n          _this3.getComments();\n          _this3.$router.push({\n            path: \"/home\"\n          });\n        }).catch(function (error) {\n          console.log(error);\n        });\n      }).catch(function () {\n        _this3.$message({\n          type: \"info\",\n          message: \"已取消删除\",\n          duration: 1000\n        });\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-d82fa10c\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/articleComment.vue\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('a',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showDBtn),expression:\"showDBtn\"}],staticClass:\"editMyArticle\",on:{\"click\":function($event){_vm.editMyA(_vm.aid)}}},[_vm._v(\"修改\")]),_vm._v(\" \"),_c('a',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showDBtn),expression:\"showDBtn\"}],staticClass:\"deleteMyArticle\",on:{\"click\":function($event){_vm.deleteMyA(_vm.aid)}}},[_vm._v(\"删除\")]),_vm._v(\" \"),_c('div',{staticClass:\"article_comments_head\"},[_vm._v(\"\\n    \"+_vm._s(_vm.commentQuantity)+\"条评论\\n  \")]),_vm._v(\" \"),_c('div',{staticClass:\"writeComment clearfix\"},[_c('el-input',{staticStyle:{\"width\":\"695px\"},attrs:{\"disabled\":!_vm.loginStatic.isLogin},nativeOn:{\"keyup\":function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }return _vm.Published($event)}},model:{value:(_vm.content),callback:function ($$v) {_vm.content=$$v},expression:\"content\"}}),_vm._v(\" \"),_c('el-button',{staticStyle:{\"width\":\"100px\"},attrs:{\"disabled\":!_vm.loginStatic.isLogin},on:{\"click\":_vm.Published}},[_vm._v(\"发表评论\")])],1),_vm._v(\" \"),_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],staticClass:\"article_comments\"},_vm._l((_vm.allcomments),function(item,index){return _c('div',{key:item.id,staticClass:\"article_comment_block\"},[_c('div',{staticClass:\"article_comment_block_user\"},[_c('div',[_c('img',{staticStyle:{\"cursor\":\"pointer\"},attrs:{\"src\":item.upic},on:{\"click\":function($event){_vm.toUserDetail(item.uid.split(',')[0])}}}),_vm._v(\" \"),_c('div',{staticClass:\"username\",staticStyle:{\"cursor\":\"pointer\"},on:{\"click\":function($event){_vm.toUserDetail(item.uid.split(',')[0])}}},[_vm._v(_vm._s(item.username))])]),_vm._v(\" \"),_c('div',{staticClass:\"article_comments_content\"},[_vm._v(\"\\n          \"+_vm._s(item.comment)+\"\\n        \")]),_vm._v(\" \"),_c('a',{staticClass:\"aReply\",on:{\"click\":function($event){_vm.sReplyBlock(index)}}},[_vm._v(\"回复\")]),_vm._v(\" \"),_c('a',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showDBtn),expression:\"showDBtn\"}],staticClass:\"deleteBtn\",on:{\"click\":function($event){_vm.deleteComment(item.id)}}},[_vm._v(\"删除\")])]),_vm._v(\" \"),_c('div',{staticClass:\"article_comment_block_time\"},[_vm._v(_vm._s(item.createdAt))]),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showRB),expression:\"showRB\"}],staticClass:\"replyBlock\"},[_c('el-input',{staticStyle:{\"width\":\"645px\",\"margin-left\":\"50px\"},nativeOn:{\"keyup\":function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }_vm.articleReply(item.uid,item.id)}},model:{value:(_vm.reply),callback:function ($$v) {_vm.reply=$$v},expression:\"reply\"}}),_vm._v(\" \"),_c('el-button',{staticStyle:{\"width\":\"100px\"},on:{\"click\":function($event){_vm.articleReply(item.uid,item.id)}}},[_vm._v(\"回复\")])],1),_vm._v(\" \"),_c('div',{staticClass:\"replysBlock\"},_vm._l((item.replys),function(rItem){return _c('div',{key:rItem.uid,staticClass:\"replyItem\"},[_c('b',[_vm._v(_vm._s(rItem.uid)+\":\")]),_vm._v(\" \"+_vm._s(rItem.reply)+\"\\n          \"),_c('span',[_vm._v(_vm._s(rItem.createdAt))])])}))])}))])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ var components_articleComment = (esExports);\n// CONCATENATED MODULE: ./src/components/articleComment.vue\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"1cFQ\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  articleComment,\n  components_articleComment,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ var src_components_articleComment = (Component.exports);\n\n// EXTERNAL MODULE: ./node_modules/wangeditor/release/wangEditor.js\nvar wangEditor = __webpack_require__(\"sYY+\");\nvar wangEditor_default = /*#__PURE__*/__webpack_require__.n(wangEditor);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/views/articleDetail.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var articleDetail = ({\n    name: 'articleDetail',\n    data: function data() {\n        return {\n            aid: this.$route.params.aid,\n            params: this.$route.params,\n            content: '',\n            title: '',\n            isFavorite: '',\n            uid: this.$route.params.uid,\n            dialogVisible: false\n        };\n    },\n\n    components: {\n        articleComment: src_components_articleComment,\n        myHeader: header[\"a\" /* default */]\n    },\n    props: {\n        loginStatic: {\n            required: true\n        },\n        privateMessageData: {\n            required: true\n        }\n    },\n    created: function created() {\n        this.exameFavoriteArticle();\n        var that = this;\n        var data = {\n            aid: this.aid\n        };\n        axiosService[\"a\" /* default */].post(\"/api/detailArticle\", data).then(function (req) {\n            var tmpDate = req.data[0];\n            that.content = tmpDate.content;\n            that.title = tmpDate.title;\n        });\n    },\n\n    methods: {\n        toUserDetail: function toUserDetail(uid) {\n            if (uid == this.loginStatic.uid) {\n                this.$router.push({\n                    path: '/personnalCenter/' + uid + '/me/first'\n                });\n            } else {\n                this.$router.push({\n                    path: '/personnalCenter/' + uid + '/others/first'\n                });\n            }\n        },\n        addFavoriteArticle: function addFavoriteArticle() {\n            if (this.isFavorite) {\n                this.dialogVisible = true;\n            } else {\n                var that = this;\n                var data = {\n                    aid: this.aid,\n                    uid: this.uid\n                };\n                if (this.uid != 'none') {\n                    axiosService[\"a\" /* default */].post(\"/api/addFavoriteArticle\", data).then(function (req) {\n                        that.$message({\n                            message: '收藏成功，可以去自己的个人中心查看哦',\n                            type: 'success',\n                            duration: 1000\n                        });\n                        that.exameFavoriteArticle();\n                    });\n                } else {\n                    this.$message({\n                        message: '先登录账号再进行收藏',\n                        type: 'error',\n                        duration: 1000\n                    });\n                }\n            }\n        },\n        exameFavoriteArticle: function exameFavoriteArticle() {\n            var that = this;\n            var data = {\n                aid: this.aid,\n                uid: this.uid\n            };\n            axiosService[\"a\" /* default */].post(\"/api/exameFavoriteArticle\", data).then(function (req) {\n                that.isFavorite = req.data;\n            });\n        },\n        deleteFavoriteArticle: function deleteFavoriteArticle() {\n            var that = this;\n            var data = {\n                aid: this.aid,\n                uid: this.uid\n            };\n            console.log(data, \"data2333\");\n            axiosService[\"a\" /* default */].post(\"/api/deleteFavoriteArticle\", data).then(function (req) {\n                that.dialogVisible = false;\n                that.exameFavoriteArticle();\n                that.$message({\n                    message: '已取消收藏该文章',\n                    type: 'normal',\n                    duration: 1000\n                });\n            });\n        }\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-146dbb7c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/articleDetail.vue\nvar articleDetail_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"background\":\"#fff\"}},[_c('div',{staticClass:\"header_two\"},[_c('span',{staticClass:\"header_two_logo\"},[_c('router-link',{attrs:{\"to\":\"/home\"}},[_vm._v(\"YUYAN\")])],1),_vm._v(\" \"),_c('span',{staticStyle:{\"margin-left\":\"120px\",\"font-weight\":\"800\"}},[_vm._v(\"文章\")])]),_vm._v(\" \"),_c('div',{staticClass:\"article_detail_content\"},[_c('div',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.title))]),_vm._v(\" \"),_c('div',{staticClass:\"article_detail_writer\"},[_c('img',{staticClass:\"article_detail_writer_pic\",attrs:{\"src\":_vm.params.upic,\"alt\":\"\"},on:{\"click\":function($event){_vm.toUserDetail(_vm.params.uid)}}}),_vm._v(\" \"),_c('div',{staticClass:\"article_detail_writer_name\"},[_vm._v(_vm._s(_vm.params.username)+\" · \"+_vm._s(_vm.params.createdAt))]),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.loginStatic.isLogin),expression:\"loginStatic.isLogin\"}],staticClass:\"articleFavorite\",on:{\"click\":_vm.addFavoriteArticle}},[_c('i',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.isFavorite),expression:\"!isFavorite\"}],staticClass:\"el-icon-star-off articleFavorite_icon\"}),_vm._v(\" \"),_c('i',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isFavorite),expression:\"isFavorite\"}],staticClass:\"el-icon-star-on articleFavorite_icon\"}),_vm._v(\" 收藏\\n            \")])]),_vm._v(\" \"),_c('div',{staticClass:\"article_detail_main\"},[_c('div',{staticClass:\"content\",domProps:{\"innerHTML\":_vm._s(_vm.content)}})]),_vm._v(\" \"),_c('articleComment',{attrs:{\"loginStatic\":_vm.loginStatic,\"aid\":_vm.aid,\"username\":_vm.params.username}})],1),_vm._v(\" \"),_c('el-dialog',{attrs:{\"title\":\"提示\",\"visible\":_vm.dialogVisible,\"width\":\"30%\"},on:{\"update:visible\":function($event){_vm.dialogVisible=$event}}},[_c('span',[_vm._v(\"您已经关注此文章，点击确定\"),_c('span',{staticStyle:{\"color\":\"red\"}},[_vm._v(\"取消关注\")]),_vm._v(\"该文章\")]),_vm._v(\" \"),_c('span',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{on:{\"click\":function($event){_vm.dialogVisible = false}}},[_vm._v(\"取 消\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.deleteFavoriteArticle}},[_vm._v(\"确 定\")])],1)])],1)}\nvar articleDetail_staticRenderFns = []\nvar articleDetail_esExports = { render: articleDetail_render, staticRenderFns: articleDetail_staticRenderFns }\n/* harmony default export */ var views_articleDetail = (articleDetail_esExports);\n// CONCATENATED MODULE: ./src/views/articleDetail.vue\nfunction articleDetail_injectStyle (ssrContext) {\n  __webpack_require__(\"Rpzr\")\n}\nvar articleDetail_normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar articleDetail___vue_template_functional__ = false\n/* styles */\nvar articleDetail___vue_styles__ = articleDetail_injectStyle\n/* scopeId */\nvar articleDetail___vue_scopeId__ = \"data-v-146dbb7c\"\n/* moduleIdentifier (server only) */\nvar articleDetail___vue_module_identifier__ = null\nvar articleDetail_Component = articleDetail_normalizeComponent(\n  articleDetail,\n  views_articleDetail,\n  articleDetail___vue_template_functional__,\n  articleDetail___vue_styles__,\n  articleDetail___vue_scopeId__,\n  articleDetail___vue_module_identifier__\n)\n\n/* harmony default export */ var src_views_articleDetail = __webpack_exports__[\"default\"] = (articleDetail_Component.exports);\n\n\n/***/ }),\n\n/***/ \"sYY+\":\n/***/ (function(module, exports, __webpack_require__) {\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            alt: '[坏笑]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n        }, {\n            alt: '[舔屏]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n        }, {\n            alt: '[污]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n        }]\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n            alt: '[草泥马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n            alt: '[神马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n            alt: '[浮云]'\n        }]\n    }, {\n        // tab 的标题\n        title: 'emoji',\n        // type -> 'emoji' / 'image'\n        type: 'emoji',\n        // content -> 数组\n        content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n            elemResult = replaceHtmlSymbol(elemResult);\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 100) {\n                // 间隔大于 100 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n                // val = encodeURIComponent(val)\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/5.0d1357de7c711715c478.js","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-d82fa10c\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./articleComment.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"a3481000\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/extract-text-webpack-plugin/dist/loader.js?{\"omit\":1,\"remove\":true}!./node_modules/vue-style-loader!./node_modules/css-loader?{\"minimize\":true,\"sourceMap\":true}!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-d82fa10c\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/components/articleComment.vue\n// module id = 1cFQ\n// module chunks = 5","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".article_detail_content[data-v-146dbb7c]{width:800px;margin:0 auto;padding-bottom:30px}.title[data-v-146dbb7c]{margin:0 auto;padding-top:20px;font-size:30px}.article_detail_main[data-v-146dbb7c]{margin-bottom:40px;padding-bottom:30px;border-bottom:1px solid #e6e6e6}.content[data-v-146dbb7c]{line-height:2.5}.content>figure[data-v-146dbb7c]{display:none!important}.article_detail_writer_pic[data-v-146dbb7c]{height:45px;width:45px;border-radius:50%;cursor:pointer}.article_detail_writer[data-v-146dbb7c]{position:relative;margin:30px 0}.article_detail_writer_name[data-v-146dbb7c]{position:absolute;left:60px;top:15px;font-size:16px;color:#999}.articleFavorite[data-v-146dbb7c]{position:absolute;right:0;top:-60px;cursor:pointer;color:gray}.articleFavorite_icon[data-v-146dbb7c]{font-size:24px}\", \"\", {\"version\":3,\"sources\":[\"D:/YuYan/src/views/articleDetail.vue\"],\"names\":[],\"mappings\":\"AACA,yCACI,YAAa,AACb,cAAe,AACf,mBAAqB,CACxB,AACD,wBACI,cAAe,AACf,iBAAkB,AAClB,cAAe,CAClB,AACD,sCACI,mBAAoB,AACpB,oBAAqB,AACrB,+BAAiC,CACpC,AACD,0BACI,eAAiB,CACpB,AACD,iCACI,sBAAwB,CAC3B,AACD,4CACI,YAAa,AACb,WAAY,AACZ,kBAAmB,AACnB,cAAgB,CACnB,AACD,wCACI,kBAAmB,AACnB,aAAe,CAClB,AACD,6CACI,kBAAmB,AACnB,UAAW,AACX,SAAU,AACV,eAAgB,AAChB,UAAY,CACf,AACD,kCACI,kBAAmB,AACnB,QAAW,AACX,UAAW,AACX,eAAgB,AAChB,UAAY,CACf,AACD,uCACI,cAAgB,CACnB\",\"file\":\"articleDetail.vue\",\"sourcesContent\":[\"\\n.article_detail_content[data-v-146dbb7c] {\\n    width: 800px;\\n    margin: 0 auto;\\n    padding-bottom: 30px;\\n}\\n.title[data-v-146dbb7c] {\\n    margin: 0 auto;\\n    padding-top: 20px;\\n    font-size: 30px\\n}\\n.article_detail_main[data-v-146dbb7c] {\\n    margin-bottom: 40px;\\n    padding-bottom: 30px;\\n    border-bottom: 1px solid #e6e6e6;\\n}\\n.content[data-v-146dbb7c] {\\n    line-height: 2.5;\\n}\\n.content>figure[data-v-146dbb7c] {\\n    display: none !important\\n}\\n.article_detail_writer_pic[data-v-146dbb7c] {\\n    height: 45px;\\n    width: 45px;\\n    border-radius: 50%;\\n    cursor: pointer;\\n}\\n.article_detail_writer[data-v-146dbb7c] {\\n    position: relative;\\n    margin: 30px 0;\\n}\\n.article_detail_writer_name[data-v-146dbb7c] {\\n    position: absolute;\\n    left: 60px;\\n    top: 15px;\\n    font-size: 16px;\\n    color: #999;\\n}\\n.articleFavorite[data-v-146dbb7c] {\\n    position: absolute;\\n    right: 0px;\\n    top: -60px;\\n    cursor: pointer;\\n    color: gray;\\n}\\n.articleFavorite_icon[data-v-146dbb7c] {\\n    font-size: 24px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"minimize\":true,\"sourceMap\":true}!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-146dbb7c\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/views/articleDetail.vue\n// module id = 2ePM\n// module chunks = 5","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".replyBlock{margin-bottom:10px;margin-top:20px}.replysBlock{margin:10px 0 10px 50px;background:#f5f5f5}.replyItem{padding:10px}.replyItem b{color:#0f88eb;cursor:pointer}.replyItem span{color:#999;float:right}.article_comment_block{margin:15px 0;border-bottom:1px solid rgba(0,0,0,.1);position:relative}.article_comment_block_user{position:relative}.aReply{position:absolute;right:20px;bottom:-30px;cursor:pointer}.aReply:hover{color:#0f88eb;-webkit-transition:.3s;transition:.3s}.article_comment_block_user img{height:40px;width:40px;border-radius:50%}.username{position:absolute;top:0;left:60px;font-weight:700}.article_comments_content{position:absolute;top:25px;left:60px}.article_comment_block_time{color:gray;font-size:14px;margin:10px 0}.article_comments_head{margin:40px 0;padding-left:20px;border-left:5px solid gray;font-weight:700}.writeComment{margin-bottom:30px}.article_comments{padding-bottom:100px}.deleteBtn{position:absolute;cursor:pointer;bottom:-30px;right:70px}.deleteMyArticle,.editMyArticle{position:absolute;top:20px;cursor:pointer;font-weight:700}.editMyArticle{right:300px}.deleteMyArticle{right:350px}\", \"\", {\"version\":3,\"sources\":[\"D:/YuYan/src/components/articleComment.vue\"],\"names\":[],\"mappings\":\"AACA,YACE,mBAAoB,AACpB,eAAiB,CAClB,AACD,aACE,wBAAyB,AACzB,kBAAoB,CACrB,AACD,WACE,YAAc,CACf,AACD,aACE,cAAe,AACf,cAAgB,CACjB,AACD,gBACE,WAAY,AACZ,WAAa,CACd,AACD,uBACE,cAAe,AACf,uCAA4C,AAC5C,iBAAmB,CACpB,AACD,4BACE,iBAAmB,CACpB,AACD,QACE,kBAAmB,AACnB,WAAY,AACZ,aAAc,AACd,cAAgB,CACjB,AACD,cACE,cAAe,AACf,uBAAyB,AACzB,cAAiB,CAClB,AACD,gCACE,YAAa,AACb,WAAY,AACZ,iBAAmB,CACpB,AACD,UACE,kBAAmB,AACnB,MAAS,AACT,UAAW,AACX,eAAiB,CAClB,AACD,0BACE,kBAAmB,AACnB,SAAU,AACV,SAAW,CACZ,AACD,4BACE,WAAY,AACZ,eAAgB,AAChB,aAAe,CAChB,AACD,uBACE,cAAe,AACf,kBAAmB,AAGnB,2BAA4B,AAC5B,eAAiB,CAHlB,AAKD,cACE,kBAAoB,CACrB,AACD,kBACE,oBAAsB,CACvB,AACD,WACE,kBAAmB,AACnB,eAAgB,AAChB,aAAc,AACd,UAAY,CACb,AACD,gCAEE,kBAAmB,AACnB,SAAU,AACV,eAAgB,AAChB,eAAiB,CAClB,AACD,eACE,WAAa,CACd,AACD,iBACE,WAAa,CACd\",\"file\":\"articleComment.vue\",\"sourcesContent\":[\"\\n.replyBlock {\\r\\n  margin-bottom: 10px;\\r\\n  margin-top: 20px;\\n}\\n.replysBlock {\\r\\n  margin: 10px 0 10px 50px;\\r\\n  background: #f5f5f5;\\n}\\n.replyItem {\\r\\n  padding: 10px;\\n}\\n.replyItem b {\\r\\n  color: #0f88eb;\\r\\n  cursor: pointer;\\n}\\n.replyItem span {\\r\\n  color: #999;\\r\\n  float: right;\\n}\\n.article_comment_block {\\r\\n  margin: 15px 0;\\r\\n  border-bottom: rgba(0, 0, 0, 0.1) solid 1px;\\r\\n  position: relative;\\n}\\n.article_comment_block_user {\\r\\n  position: relative;\\n}\\n.aReply {\\r\\n  position: absolute;\\r\\n  right: 20px;\\r\\n  bottom: -30px;\\r\\n  cursor: pointer;\\n}\\n.aReply:hover {\\r\\n  color: #0f88eb;\\r\\n  -webkit-transition: 0.3s;\\r\\n  transition: 0.3s;\\n}\\n.article_comment_block_user img {\\r\\n  height: 40px;\\r\\n  width: 40px;\\r\\n  border-radius: 50%;\\n}\\n.username {\\r\\n  position: absolute;\\r\\n  top: 0px;\\r\\n  left: 60px;\\r\\n  font-weight: 700;\\n}\\n.article_comments_content {\\r\\n  position: absolute;\\r\\n  top: 25px;\\r\\n  left: 60px;\\n}\\n.article_comment_block_time {\\r\\n  color: gray;\\r\\n  font-size: 14px;\\r\\n  margin: 10px 0;\\n}\\n.article_comments_head {\\r\\n  margin: 40px 0;\\r\\n  padding-left: 20px;\\n}\\n.article_comments_head {\\r\\n  border-left: 5px solid gray;\\r\\n  font-weight: 700;\\n}\\n.writeComment {\\r\\n  margin-bottom: 30px;\\n}\\n.article_comments {\\r\\n  padding-bottom: 100px;\\n}\\n.deleteBtn {\\r\\n  position: absolute;\\r\\n  cursor: pointer;\\r\\n  bottom: -30px;\\r\\n  right: 70px;\\n}\\n.deleteMyArticle,\\r\\n.editMyArticle {\\r\\n  position: absolute;\\r\\n  top: 20px;\\r\\n  cursor: pointer;\\r\\n  font-weight: 700;\\n}\\n.editMyArticle {\\r\\n  right: 300px;\\n}\\n.deleteMyArticle {\\r\\n  right: 350px;\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"minimize\":true,\"sourceMap\":true}!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-d82fa10c\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/components/articleComment.vue\n// module id = 3b5Z\n// module chunks = 5","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-146dbb7c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./articleDetail.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"b80bfe4a\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/extract-text-webpack-plugin/dist/loader.js?{\"omit\":1,\"remove\":true}!./node_modules/vue-style-loader!./node_modules/css-loader?{\"minimize\":true,\"sourceMap\":true}!./node_modules/vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-146dbb7c\",\"scoped\":true,\"hasInlineConfig\":false}!./node_modules/vue-loader/lib/selector.js?type=styles&index=0!./src/views/articleDetail.vue\n// module id = Rpzr\n// module chunks = 5","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-d82fa10c\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./articleComment.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./articleComment.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./articleComment.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-d82fa10c\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./articleComment.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/articleComment.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-146dbb7c\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./articleDetail.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./articleDetail.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./articleDetail.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-146dbb7c\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":\\\"src\\\",\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./articleDetail.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-146dbb7c\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/articleDetail.vue\n// module id = null\n// module chunks = ","<template>\r\n  <div>\r\n    <a v-show=\"showDBtn\" class=\"editMyArticle\" @click=\"editMyA(aid)\">修改</a>\r\n    <a v-show=\"showDBtn\" class=\"deleteMyArticle\" @click=\"deleteMyA(aid)\">删除</a>\r\n    <div class=\"article_comments_head\">\r\n      {{commentQuantity}}条评论\r\n    </div>\r\n    <div class=\"writeComment clearfix\">\r\n      <el-input :disabled=\"!loginStatic.isLogin\" style=\"width: 695px;\" v-model=\"content\" @keyup.enter.native=\"Published\"></el-input>\r\n      <el-button :disabled=\"!loginStatic.isLogin\" @click=\"Published\" style=\"width: 100px;\">发表评论</el-button>\r\n    </div>\r\n    <div class=\"article_comments\" v-loading=\"loading\">\r\n      <div class=\"article_comment_block\" v-for=\"(item,index) in allcomments\" :key=\"item.id\">\r\n        <div class=\"article_comment_block_user\">\r\n          <div>\r\n            <img style=\"cursor:pointer\" @click=\"toUserDetail(item.uid.split(',')[0])\" :src=\"item.upic\">\r\n            <div style=\"cursor:pointer\" @click=\"toUserDetail(item.uid.split(',')[0])\" class=\"username\">{{item.username}}</div>\r\n          </div>\r\n          <div class=\"article_comments_content\">\r\n            {{item.comment}}\r\n          </div>\r\n          <a class=\"aReply\" @click=\"sReplyBlock(index)\">回复</a>\r\n          <a class=\"deleteBtn\" v-show=\"showDBtn\" @click=\"deleteComment(item.id)\">删除</a>\r\n        </div>\r\n        <div class=\"article_comment_block_time\">{{item.createdAt}}</div>\r\n        <div class=\"replyBlock\" v-show=\"showRB\">\r\n          <el-input v-model=\"reply\" @keyup.enter.native=\"articleReply(item.uid,item.id)\" style=\"width: 645px;margin-left: 50px;\"></el-input>\r\n          <el-button style=\"width: 100px;\" @click=\"articleReply(item.uid,item.id)\">回复</el-button>\r\n        </div>\r\n        <div class=\"replysBlock\">\r\n          <div class=\"replyItem\" v-for=\"rItem in item.replys\" :key=\"rItem.uid\">\r\n            <b>{{rItem.uid}}:</b> {{rItem.reply}}\r\n            <span>{{rItem.createdAt}}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nimport axios from \"../utils/axiosService\";\r\nexport default {\r\n  name: \"detail\",\r\n  components: {},\r\n  data() {\r\n    return {\r\n      content: \"\",\r\n      allcomments: \"\",\r\n      commentQuantity: \"\",\r\n      loading: false,\r\n      showDBtn: false,\r\n      reply: \"\",\r\n      showRB: false\r\n    };\r\n  },\r\n  props: [\"loginStatic\", \"aid\", \"username\"],\r\n  created() {\r\n    if (this.loginStatic.username === this.username) {\r\n      this.showDBtn = true;\r\n    }\r\n    this.getComments();\r\n  },\r\n  methods: {\r\n    sReplyBlock(index) {\r\n      let a = document.getElementsByClassName(\"replyBlock\");\r\n      if (a[index].style.display === \"block\") {\r\n        a[index].style.display = \"none\";\r\n        this.comment = \"\";\r\n      } else {\r\n        for (let x in a) {\r\n          if (a[x].style !== undefined) {\r\n            a[x].style.display = \"none\";\r\n          }\r\n        }\r\n        a[index].style.display = \"block\";\r\n      }\r\n    },\r\n    articleReply(uid, cid) {\r\n      let data = {\r\n        uid: uid,\r\n        reply: this.reply,\r\n        cid: cid\r\n      };\r\n      axios\r\n        .post(\"/api/addArticleReply\", data)\r\n        .then(res => {\r\n          this.reply = \"\";\r\n          this.sucMessage(\"回复成功\");\r\n          this.getComments();\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    },\r\n    toUserDetail(uid) {\r\n      if (uid == this.loginStatic.uid) {\r\n        this.$router.push({\r\n          path: `/personnalCenter/${uid}/me/first`\r\n        });\r\n      } else {\r\n        this.$router.push({\r\n          path: `/personnalCenter/${uid}/others/first`\r\n        });\r\n      }\r\n    },\r\n    Published() {\r\n      let that = this;\r\n      let data = {\r\n        aid: this.aid,\r\n        uid: this.loginStatic.uid,\r\n        comment: this.content\r\n      };\r\n      axios\r\n        .post(\"/api/addComment\", data)\r\n        .then(function(req) {\r\n          that.getComments();\r\n          that.$message({\r\n            message: \"评论发表成功\",\r\n            type: \"success\",\r\n            duration: 1000\r\n          });\r\n          that.content = \"\";\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    },\r\n    getComments() {\r\n      this.loading = true;\r\n      let that = this;\r\n      let data2 = {\r\n        aid: this.aid\r\n      };\r\n      axios.post(\"/api/getAriticleComment\", data2).then(function(req) {\r\n        req.data.getComment.forEach(item => {\r\n          let tmp = [];\r\n          req.data.aReply.forEach(rItem => {\r\n            if (item.id === rItem.cid) {\r\n              tmp.push(rItem);\r\n            }\r\n          });\r\n          item.replys = tmp;\r\n        });\r\n        let tmpData = req.data.getComment;\r\n        let sortCreateTime = (a, b) => {\r\n          return b.createdAt - a.createdAt;\r\n        };\r\n        tmpData.sort(sortCreateTime);\r\n        tmpData.forEach(item => {\r\n          item.createdAt = moment(item.createdAt).format(\"YYYY/MM/DD hh:mm\");\r\n        });\r\n        that.commentQuantity = tmpData.length;\r\n        that.allcomments = tmpData;\r\n        setInterval(() => {\r\n          that.loading = false;\r\n        }, 500);\r\n      });\r\n    },\r\n    deleteComment(id) {\r\n      let data = {\r\n        id: id\r\n      };\r\n      this.$confirm(\"确定要删除这条评论吗?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      })\r\n        .then(() => {\r\n          axios\r\n            .post(\"/api/deleteArticleComment\", data)\r\n            .then(res => {\r\n              this.sucMessage(res.data);\r\n              this.getComments();\r\n            })\r\n            .catch(error => {\r\n              console.log(error);\r\n            });\r\n        })\r\n        .catch(() => {\r\n          this.$message({\r\n            type: \"info\",\r\n            message: \"已取消删除\",\r\n            duration: 1000\r\n          });\r\n        });\r\n    },\r\n    editMyA(id) {\r\n      this.$router.push({\r\n        path: `/write/${id}`\r\n      });\r\n    },\r\n    deleteMyA(id) {\r\n      let data = {\r\n        id: id\r\n      };\r\n      this.$confirm(\"确定要删除这个文章吗?\", \"提示\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\"\r\n      })\r\n        .then(() => {\r\n          axios\r\n            .post(\"/api/deleteArticle\", data)\r\n            .then(res => {\r\n              this.sucMessage(res.data);\r\n              this.getComments();\r\n              this.$router.push({\r\n                path: \"/home\"\r\n              });\r\n            })\r\n            .catch(error => {\r\n              console.log(error);\r\n            });\r\n        })\r\n        .catch(() => {\r\n          this.$message({\r\n            type: \"info\",\r\n            message: \"已取消删除\",\r\n            duration: 1000\r\n          });\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.replyBlock {\r\n  margin-bottom: 10px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.replysBlock {\r\n  margin: 10px 0 10px 50px;\r\n  background: #f5f5f5;\r\n}\r\n\r\n.replyItem {\r\n  padding: 10px;\r\n}\r\n\r\n.replyItem b {\r\n  color: #0f88eb;\r\n  cursor: pointer;\r\n}\r\n\r\n.replyItem span {\r\n  color: #999;\r\n  float: right;\r\n}\r\n\r\n.article_comment_block {\r\n  margin: 15px 0;\r\n  border-bottom: rgba(0, 0, 0, 0.1) solid 1px;\r\n  position: relative;\r\n}\r\n\r\n.article_comment_block_user {\r\n  position: relative;\r\n}\r\n\r\n.aReply {\r\n  position: absolute;\r\n  right: 20px;\r\n  bottom: -30px;\r\n  cursor: pointer;\r\n}\r\n\r\n.aReply:hover {\r\n  color: #0f88eb;\r\n  transition: 0.3s;\r\n}\r\n\r\n.article_comment_block_user img {\r\n  height: 40px;\r\n  width: 40px;\r\n  border-radius: 50%;\r\n}\r\n\r\n.username {\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 60px;\r\n  font-weight: 700;\r\n}\r\n\r\n.article_comments_content {\r\n  position: absolute;\r\n  top: 25px;\r\n  left: 60px;\r\n}\r\n\r\n.article_comment_block_time {\r\n  color: gray;\r\n  font-size: 14px;\r\n  margin: 10px 0;\r\n}\r\n\r\n.article_comments_head {\r\n  margin: 40px 0;\r\n  padding-left: 20px;\r\n}\r\n\r\n.article_comments_head {\r\n  border-left: 5px solid gray;\r\n  font-weight: 700;\r\n}\r\n\r\n.writeComment {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.article_comments {\r\n  padding-bottom: 100px;\r\n}\r\n\r\n.deleteBtn {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  bottom: -30px;\r\n  right: 70px;\r\n}\r\n\r\n.deleteMyArticle,\r\n.editMyArticle {\r\n  position: absolute;\r\n  top: 20px;\r\n  cursor: pointer;\r\n  font-weight: 700;\r\n}\r\n\r\n.editMyArticle {\r\n  right: 300px;\r\n}\r\n\r\n.deleteMyArticle {\r\n  right: 350px;\r\n}\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/components/articleComment.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('a',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showDBtn),expression:\"showDBtn\"}],staticClass:\"editMyArticle\",on:{\"click\":function($event){_vm.editMyA(_vm.aid)}}},[_vm._v(\"修改\")]),_vm._v(\" \"),_c('a',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showDBtn),expression:\"showDBtn\"}],staticClass:\"deleteMyArticle\",on:{\"click\":function($event){_vm.deleteMyA(_vm.aid)}}},[_vm._v(\"删除\")]),_vm._v(\" \"),_c('div',{staticClass:\"article_comments_head\"},[_vm._v(\"\\n    \"+_vm._s(_vm.commentQuantity)+\"条评论\\n  \")]),_vm._v(\" \"),_c('div',{staticClass:\"writeComment clearfix\"},[_c('el-input',{staticStyle:{\"width\":\"695px\"},attrs:{\"disabled\":!_vm.loginStatic.isLogin},nativeOn:{\"keyup\":function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }return _vm.Published($event)}},model:{value:(_vm.content),callback:function ($$v) {_vm.content=$$v},expression:\"content\"}}),_vm._v(\" \"),_c('el-button',{staticStyle:{\"width\":\"100px\"},attrs:{\"disabled\":!_vm.loginStatic.isLogin},on:{\"click\":_vm.Published}},[_vm._v(\"发表评论\")])],1),_vm._v(\" \"),_c('div',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],staticClass:\"article_comments\"},_vm._l((_vm.allcomments),function(item,index){return _c('div',{key:item.id,staticClass:\"article_comment_block\"},[_c('div',{staticClass:\"article_comment_block_user\"},[_c('div',[_c('img',{staticStyle:{\"cursor\":\"pointer\"},attrs:{\"src\":item.upic},on:{\"click\":function($event){_vm.toUserDetail(item.uid.split(',')[0])}}}),_vm._v(\" \"),_c('div',{staticClass:\"username\",staticStyle:{\"cursor\":\"pointer\"},on:{\"click\":function($event){_vm.toUserDetail(item.uid.split(',')[0])}}},[_vm._v(_vm._s(item.username))])]),_vm._v(\" \"),_c('div',{staticClass:\"article_comments_content\"},[_vm._v(\"\\n          \"+_vm._s(item.comment)+\"\\n        \")]),_vm._v(\" \"),_c('a',{staticClass:\"aReply\",on:{\"click\":function($event){_vm.sReplyBlock(index)}}},[_vm._v(\"回复\")]),_vm._v(\" \"),_c('a',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showDBtn),expression:\"showDBtn\"}],staticClass:\"deleteBtn\",on:{\"click\":function($event){_vm.deleteComment(item.id)}}},[_vm._v(\"删除\")])]),_vm._v(\" \"),_c('div',{staticClass:\"article_comment_block_time\"},[_vm._v(_vm._s(item.createdAt))]),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.showRB),expression:\"showRB\"}],staticClass:\"replyBlock\"},[_c('el-input',{staticStyle:{\"width\":\"645px\",\"margin-left\":\"50px\"},nativeOn:{\"keyup\":function($event){if(!('button' in $event)&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }_vm.articleReply(item.uid,item.id)}},model:{value:(_vm.reply),callback:function ($$v) {_vm.reply=$$v},expression:\"reply\"}}),_vm._v(\" \"),_c('el-button',{staticStyle:{\"width\":\"100px\"},on:{\"click\":function($event){_vm.articleReply(item.uid,item.id)}}},[_vm._v(\"回复\")])],1),_vm._v(\" \"),_c('div',{staticClass:\"replysBlock\"},_vm._l((item.replys),function(rItem){return _c('div',{key:rItem.uid,staticClass:\"replyItem\"},[_c('b',[_vm._v(_vm._s(rItem.uid)+\":\")]),_vm._v(\" \"+_vm._s(rItem.reply)+\"\\n          \"),_c('span',[_vm._v(_vm._s(rItem.createdAt))])])}))])}))])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-d82fa10c\",\"hasScoped\":false,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/articleComment.vue\n// module id = null\n// module chunks = ","<template>\r\n    <div style=\"background: #fff\">\r\n        <div class=\"header_two\">\r\n            <span class=\"header_two_logo\"><router-link to=\"/home\">YUYAN</router-link></span>\r\n            <span style=\"margin-left: 120px;font-weight:800\">文章</span>\r\n        </div>\r\n        <div class=\"article_detail_content\">\r\n            <div class=\"title\">{{title}}</div>\r\n            <div class=\"article_detail_writer\">\r\n                <img class=\"article_detail_writer_pic\" @click=\"toUserDetail(params.uid)\" :src=\"params.upic\" alt=\"\">\r\n                <div class=\"article_detail_writer_name\">{{params.username}} · {{params.createdAt}}</div>\r\n                <div class=\"articleFavorite\" @click=\"addFavoriteArticle\" v-show=\"loginStatic.isLogin\">\r\n                    <i v-show=\"!isFavorite\" class=\"el-icon-star-off articleFavorite_icon\"></i>\r\n                    <i v-show=\"isFavorite\" class=\"el-icon-star-on articleFavorite_icon\"></i> 收藏\r\n                </div>\r\n            </div>\r\n            <div class=\"article_detail_main\">\r\n                <div v-html=\"content\" class=\"content\"></div>\r\n            </div>\r\n            <articleComment :loginStatic=\"loginStatic\" :aid=\"aid\" :username=\"params.username\"/>\r\n        </div>\r\n        <el-dialog\r\n            title=\"提示\"\r\n            :visible.sync=\"dialogVisible\"\r\n            width=\"30%\">\r\n            <span>您已经关注此文章，点击确定<span style=\"color: red\">取消关注</span>该文章</span>\r\n            <span slot=\"footer\" class=\"dialog-footer\">\r\n                <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n                <el-button type=\"primary\" @click=\"deleteFavoriteArticle\">确 定</el-button>\r\n            </span>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n<script>\r\n    import axios from '../utils/axiosService'\r\n    import myHeader from '@/components/header.vue'\r\n    import articleComment from '@/components/articleComment.vue'\r\n    import E from 'wangeditor'\r\n    export default {\r\n        name: 'articleDetail',\r\n        data() {\r\n            return {\r\n                aid: this.$route.params.aid,\r\n                params: this.$route.params,\r\n                content: '',\r\n                title: '',\r\n                isFavorite: '',\r\n                uid: this.$route.params.uid,\r\n                dialogVisible: false\r\n            }\r\n        },\r\n        components: {\r\n            articleComment,\r\n            myHeader\r\n        },\r\n        props: {\r\n            loginStatic: {\r\n                required: true\r\n            },\r\n            privateMessageData: {\r\n                required: true\r\n            }\r\n        },\r\n        created() {\r\n            this.exameFavoriteArticle()\r\n            let that = this\r\n            let data = {\r\n                aid: this.aid\r\n            };\r\n            axios.post(\"/api/detailArticle\", data).then(function(req) {\r\n                let tmpDate = req.data[0]\r\n                that.content = tmpDate.content\r\n                that.title = tmpDate.title\r\n            })\r\n        },\r\n        methods: {\r\n            toUserDetail(uid) {\r\n                if (uid == this.loginStatic.uid) {\r\n                    this.$router.push({\r\n                        path: `/personnalCenter/${uid}/me/first`\r\n                    })\r\n                } else {\r\n                    this.$router.push({\r\n                        path: `/personnalCenter/${uid}/others/first`\r\n                    })\r\n                }\r\n            },\r\n            addFavoriteArticle() {\r\n                if (this.isFavorite) {\r\n                    this.dialogVisible = true\r\n                } else {\r\n                    let that = this\r\n                    let data = {\r\n                        aid: this.aid,\r\n                        uid: this.uid\r\n                    }\r\n                    if (this.uid != 'none') {\r\n                        axios.post(\"/api/addFavoriteArticle\", data).then(function(req) {\r\n                            that.$message({\r\n                                message: '收藏成功，可以去自己的个人中心查看哦',\r\n                                type: 'success',\r\n                                duration: 1000\r\n                            })\r\n                            that.exameFavoriteArticle()\r\n                        })\r\n                    } else {\r\n                        this.$message({\r\n                            message: '先登录账号再进行收藏',\r\n                            type: 'error',\r\n                            duration: 1000\r\n                        })\r\n                    }\r\n                }\r\n            },\r\n            exameFavoriteArticle() {\r\n                let that = this\r\n                let data = {\r\n                    aid: this.aid,\r\n                    uid: this.uid\r\n                }\r\n                axios.post(\"/api/exameFavoriteArticle\", data).then(function(req) {\r\n                    that.isFavorite = req.data\r\n                })\r\n            },\r\n            deleteFavoriteArticle() {\r\n                let that = this\r\n                let data = {\r\n                    aid: this.aid,\r\n                    uid: this.uid\r\n                }\r\n                console.log(data, \"data2333\")\r\n                axios.post(\"/api/deleteFavoriteArticle\", data).then(function(req) {\r\n                    that.dialogVisible = false\r\n                    that.exameFavoriteArticle()\r\n                    that.$message({\r\n                        message: '已取消收藏该文章',\r\n                        type: 'normal',\r\n                        duration: 1000\r\n                    })\r\n                })\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .article_detail_content {\r\n        width: 800px;\r\n        margin: 0 auto;\r\n        padding-bottom: 30px;\r\n    }\r\n    \r\n    .title {\r\n        margin: 0 auto;\r\n        padding-top: 20px;\r\n        font-size: 30px\r\n    }\r\n    \r\n    .article_detail_main {\r\n        margin-bottom: 40px;\r\n        padding-bottom: 30px;\r\n        border-bottom: 1px solid #e6e6e6;\r\n    }\r\n    \r\n    .content {\r\n        line-height: 2.5;\r\n    }\r\n    \r\n    .content>figure {\r\n        display: none !important\r\n    }\r\n    \r\n    .article_detail_writer_pic {\r\n        height: 45px;\r\n        width: 45px;\r\n        border-radius: 50%;\r\n        cursor: pointer;\r\n    }\r\n    \r\n    .article_detail_writer {\r\n        position: relative;\r\n        margin: 30px 0;\r\n    }\r\n    \r\n    .article_detail_writer_name {\r\n        position: absolute;\r\n        left: 60px;\r\n        top: 15px;\r\n        font-size: 16px;\r\n        color: #999;\r\n    }\r\n    \r\n    .articleFavorite {\r\n        position: absolute;\r\n        right: 0px;\r\n        top: -60px;\r\n        cursor: pointer;\r\n        color: gray;\r\n    }\r\n    \r\n    .articleFavorite_icon {\r\n        font-size: 24px;\r\n    }\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/views/articleDetail.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"background\":\"#fff\"}},[_c('div',{staticClass:\"header_two\"},[_c('span',{staticClass:\"header_two_logo\"},[_c('router-link',{attrs:{\"to\":\"/home\"}},[_vm._v(\"YUYAN\")])],1),_vm._v(\" \"),_c('span',{staticStyle:{\"margin-left\":\"120px\",\"font-weight\":\"800\"}},[_vm._v(\"文章\")])]),_vm._v(\" \"),_c('div',{staticClass:\"article_detail_content\"},[_c('div',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.title))]),_vm._v(\" \"),_c('div',{staticClass:\"article_detail_writer\"},[_c('img',{staticClass:\"article_detail_writer_pic\",attrs:{\"src\":_vm.params.upic,\"alt\":\"\"},on:{\"click\":function($event){_vm.toUserDetail(_vm.params.uid)}}}),_vm._v(\" \"),_c('div',{staticClass:\"article_detail_writer_name\"},[_vm._v(_vm._s(_vm.params.username)+\" · \"+_vm._s(_vm.params.createdAt))]),_vm._v(\" \"),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.loginStatic.isLogin),expression:\"loginStatic.isLogin\"}],staticClass:\"articleFavorite\",on:{\"click\":_vm.addFavoriteArticle}},[_c('i',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.isFavorite),expression:\"!isFavorite\"}],staticClass:\"el-icon-star-off articleFavorite_icon\"}),_vm._v(\" \"),_c('i',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.isFavorite),expression:\"isFavorite\"}],staticClass:\"el-icon-star-on articleFavorite_icon\"}),_vm._v(\" 收藏\\n            \")])]),_vm._v(\" \"),_c('div',{staticClass:\"article_detail_main\"},[_c('div',{staticClass:\"content\",domProps:{\"innerHTML\":_vm._s(_vm.content)}})]),_vm._v(\" \"),_c('articleComment',{attrs:{\"loginStatic\":_vm.loginStatic,\"aid\":_vm.aid,\"username\":_vm.params.username}})],1),_vm._v(\" \"),_c('el-dialog',{attrs:{\"title\":\"提示\",\"visible\":_vm.dialogVisible,\"width\":\"30%\"},on:{\"update:visible\":function($event){_vm.dialogVisible=$event}}},[_c('span',[_vm._v(\"您已经关注此文章，点击确定\"),_c('span',{staticStyle:{\"color\":\"red\"}},[_vm._v(\"取消关注\")]),_vm._v(\"该文章\")]),_vm._v(\" \"),_c('span',{staticClass:\"dialog-footer\",attrs:{\"slot\":\"footer\"},slot:\"footer\"},[_c('el-button',{on:{\"click\":function($event){_vm.dialogVisible = false}}},[_vm._v(\"取 消\")]),_vm._v(\" \"),_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.deleteFavoriteArticle}},[_vm._v(\"确 定\")])],1)])],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-146dbb7c\",\"hasScoped\":true,\"transformToRequire\":{\"video\":\"src\",\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/articleDetail.vue\n// module id = null\n// module chunks = ","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.wangEditor = factory());\n}(this, (function () { 'use strict';\n\n/*\n    poly-fill\n*/\n\nvar polyfill = function () {\n\n    // Object.assign\n    if (typeof Object.assign != 'function') {\n        Object.assign = function (target, varArgs) {\n            // .length of function is 2\n            if (target == null) {\n                // TypeError if undefined or null\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var to = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n                var nextSource = arguments[index];\n\n                if (nextSource != null) {\n                    // Skip over if undefined or null\n                    for (var nextKey in nextSource) {\n                        // Avoid bugs when hasOwnProperty is shadowed\n                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                            to[nextKey] = nextSource[nextKey];\n                        }\n                    }\n                }\n            }\n            return to;\n        };\n    }\n\n    // IE 中兼容 Element.prototype.matches\n    if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n            var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n                i = matches.length;\n            while (--i >= 0 && matches.item(i) !== this) {}\n            return i > -1;\n        };\n    }\n};\n\n/*\n    DOM 操作 API\n*/\n\n// 根据 html 代码片段创建 dom 对象\nfunction createElemByHTML(html) {\n    var div = void 0;\n    div = document.createElement('div');\n    div.innerHTML = html;\n    return div.children;\n}\n\n// 是否是 DOM List\nfunction isDOMList(selector) {\n    if (!selector) {\n        return false;\n    }\n    if (selector instanceof HTMLCollection || selector instanceof NodeList) {\n        return true;\n    }\n    return false;\n}\n\n// 封装 document.querySelectorAll\nfunction querySelectorAll(selector) {\n    var result = document.querySelectorAll(selector);\n    if (isDOMList(result)) {\n        return result;\n    } else {\n        return [result];\n    }\n}\n\n// 记录所有的事件绑定\nvar eventList = [];\n\n// 创建构造函数\nfunction DomElement(selector) {\n    if (!selector) {\n        return;\n    }\n\n    // selector 本来就是 DomElement 对象，直接返回\n    if (selector instanceof DomElement) {\n        return selector;\n    }\n\n    this.selector = selector;\n    var nodeType = selector.nodeType;\n\n    // 根据 selector 得出的结果（如 DOM，DOM List）\n    var selectorResult = [];\n    if (nodeType === 9) {\n        // document 节点\n        selectorResult = [selector];\n    } else if (nodeType === 1) {\n        // 单个 DOM 节点\n        selectorResult = [selector];\n    } else if (isDOMList(selector) || selector instanceof Array) {\n        // DOM List 或者数组\n        selectorResult = selector;\n    } else if (typeof selector === 'string') {\n        // 字符串\n        selector = selector.replace('/\\n/mg', '').trim();\n        if (selector.indexOf('<') === 0) {\n            // 如 <div>\n            selectorResult = createElemByHTML(selector);\n        } else {\n            // 如 #id .class\n            selectorResult = querySelectorAll(selector);\n        }\n    }\n\n    var length = selectorResult.length;\n    if (!length) {\n        // 空数组\n        return this;\n    }\n\n    // 加入 DOM 节点\n    var i = void 0;\n    for (i = 0; i < length; i++) {\n        this[i] = selectorResult[i];\n    }\n    this.length = length;\n}\n\n// 修改原型\nDomElement.prototype = {\n    constructor: DomElement,\n\n    // 类数组，forEach\n    forEach: function forEach(fn) {\n        var i = void 0;\n        for (i = 0; i < this.length; i++) {\n            var elem = this[i];\n            var result = fn.call(elem, elem, i);\n            if (result === false) {\n                break;\n            }\n        }\n        return this;\n    },\n\n    // clone\n    clone: function clone(deep) {\n        var cloneList = [];\n        this.forEach(function (elem) {\n            cloneList.push(elem.cloneNode(!!deep));\n        });\n        return $(cloneList);\n    },\n\n    // 获取第几个元素\n    get: function get(index) {\n        var length = this.length;\n        if (index >= length) {\n            index = index % length;\n        }\n        return $(this[index]);\n    },\n\n    // 第一个\n    first: function first() {\n        return this.get(0);\n    },\n\n    // 最后一个\n    last: function last() {\n        var length = this.length;\n        return this.get(length - 1);\n    },\n\n    // 绑定事件\n    on: function on(type, selector, fn) {\n        // selector 不为空，证明绑定事件要加代理\n        if (!fn) {\n            fn = selector;\n            selector = null;\n        }\n\n        // type 是否有多个\n        var types = [];\n        types = type.split(/\\s+/);\n\n        return this.forEach(function (elem) {\n            types.forEach(function (type) {\n                if (!type) {\n                    return;\n                }\n\n                // 记录下，方便后面解绑\n                eventList.push({\n                    elem: elem,\n                    type: type,\n                    fn: fn\n                });\n\n                if (!selector) {\n                    // 无代理\n                    elem.addEventListener(type, fn);\n                    return;\n                }\n\n                // 有代理\n                elem.addEventListener(type, function (e) {\n                    var target = e.target;\n                    if (target.matches(selector)) {\n                        fn.call(target, e);\n                    }\n                });\n            });\n        });\n    },\n\n    // 取消事件绑定\n    off: function off(type, fn) {\n        return this.forEach(function (elem) {\n            elem.removeEventListener(type, fn);\n        });\n    },\n\n    // 获取/设置 属性\n    attr: function attr(key, val) {\n        if (val == null) {\n            // 获取值\n            return this[0].getAttribute(key);\n        } else {\n            // 设置值\n            return this.forEach(function (elem) {\n                elem.setAttribute(key, val);\n            });\n        }\n    },\n\n    // 添加 class\n    addClass: function addClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    return !!item.trim();\n                });\n                // 添加 class\n                if (arr.indexOf(className) < 0) {\n                    arr.push(className);\n                }\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            } else {\n                elem.className = className;\n            }\n        });\n    },\n\n    // 删除 class\n    removeClass: function removeClass(className) {\n        if (!className) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var arr = void 0;\n            if (elem.className) {\n                // 解析当前 className 转换为数组\n                arr = elem.className.split(/\\s/);\n                arr = arr.filter(function (item) {\n                    item = item.trim();\n                    // 删除 class\n                    if (!item || item === className) {\n                        return false;\n                    }\n                    return true;\n                });\n                // 修改 elem.class\n                elem.className = arr.join(' ');\n            }\n        });\n    },\n\n    // 修改 css\n    css: function css(key, val) {\n        var currentStyle = key + ':' + val + ';';\n        return this.forEach(function (elem) {\n            var style = (elem.getAttribute('style') || '').trim();\n            var styleArr = void 0,\n                resultArr = [];\n            if (style) {\n                // 将 style 按照 ; 拆分为数组\n                styleArr = style.split(';');\n                styleArr.forEach(function (item) {\n                    // 对每项样式，按照 : 拆分为 key 和 value\n                    var arr = item.split(':').map(function (i) {\n                        return i.trim();\n                    });\n                    if (arr.length === 2) {\n                        resultArr.push(arr[0] + ':' + arr[1]);\n                    }\n                });\n                // 替换或者新增\n                resultArr = resultArr.map(function (item) {\n                    if (item.indexOf(key) === 0) {\n                        return currentStyle;\n                    } else {\n                        return item;\n                    }\n                });\n                if (resultArr.indexOf(currentStyle) < 0) {\n                    resultArr.push(currentStyle);\n                }\n                // 结果\n                elem.setAttribute('style', resultArr.join('; '));\n            } else {\n                // style 无值\n                elem.setAttribute('style', currentStyle);\n            }\n        });\n    },\n\n    // 显示\n    show: function show() {\n        return this.css('display', 'block');\n    },\n\n    // 隐藏\n    hide: function hide() {\n        return this.css('display', 'none');\n    },\n\n    // 获取子节点\n    children: function children() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.children);\n    },\n\n    // 获取子节点（包括文本节点）\n    childNodes: function childNodes() {\n        var elem = this[0];\n        if (!elem) {\n            return null;\n        }\n\n        return $(elem.childNodes);\n    },\n\n    // 增加子节点\n    append: function append($children) {\n        return this.forEach(function (elem) {\n            $children.forEach(function (child) {\n                elem.appendChild(child);\n            });\n        });\n    },\n\n    // 移除当前节点\n    remove: function remove() {\n        return this.forEach(function (elem) {\n            if (elem.remove) {\n                elem.remove();\n            } else {\n                var parent = elem.parentElement;\n                parent && parent.removeChild(elem);\n            }\n        });\n    },\n\n    // 是否包含某个子节点\n    isContain: function isContain($child) {\n        var elem = this[0];\n        var child = $child[0];\n        return elem.contains(child);\n    },\n\n    // 尺寸数据\n    getSizeData: function getSizeData() {\n        var elem = this[0];\n        return elem.getBoundingClientRect(); // 可得到 bottom height left right top width 的数据\n    },\n\n    // 封装 nodeName\n    getNodeName: function getNodeName() {\n        var elem = this[0];\n        return elem.nodeName;\n    },\n\n    // 从当前元素查找\n    find: function find(selector) {\n        var elem = this[0];\n        return $(elem.querySelectorAll(selector));\n    },\n\n    // 获取当前元素的 text\n    text: function text(val) {\n        if (!val) {\n            // 获取 text\n            var elem = this[0];\n            return elem.innerHTML.replace(/<.*?>/g, function () {\n                return '';\n            });\n        } else {\n            // 设置 text\n            return this.forEach(function (elem) {\n                elem.innerHTML = val;\n            });\n        }\n    },\n\n    // 获取 html\n    html: function html(value) {\n        var elem = this[0];\n        if (value == null) {\n            return elem.innerHTML;\n        } else {\n            elem.innerHTML = value;\n            return this;\n        }\n    },\n\n    // 获取 value\n    val: function val() {\n        var elem = this[0];\n        return elem.value.trim();\n    },\n\n    // focus\n    focus: function focus() {\n        return this.forEach(function (elem) {\n            elem.focus();\n        });\n    },\n\n    // parent\n    parent: function parent() {\n        var elem = this[0];\n        return $(elem.parentElement);\n    },\n\n    // parentUntil 找到符合 selector 的父节点\n    parentUntil: function parentUntil(selector, _currentElem) {\n        var results = document.querySelectorAll(selector);\n        var length = results.length;\n        if (!length) {\n            // 传入的 selector 无效\n            return null;\n        }\n\n        var elem = _currentElem || this[0];\n        if (elem.nodeName === 'BODY') {\n            return null;\n        }\n\n        var parent = elem.parentElement;\n        var i = void 0;\n        for (i = 0; i < length; i++) {\n            if (parent === results[i]) {\n                // 找到，并返回\n                return $(parent);\n            }\n        }\n\n        // 继续查找\n        return this.parentUntil(selector, parent);\n    },\n\n    // 判断两个 elem 是否相等\n    equal: function equal($elem) {\n        if ($elem.nodeType === 1) {\n            return this[0] === $elem;\n        } else {\n            return this[0] === $elem[0];\n        }\n    },\n\n    // 将该元素插入到某个元素前面\n    insertBefore: function insertBefore(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            parent.insertBefore(elem, referenceNode);\n        });\n    },\n\n    // 将该元素插入到某个元素后面\n    insertAfter: function insertAfter(selector) {\n        var $referenceNode = $(selector);\n        var referenceNode = $referenceNode[0];\n        if (!referenceNode) {\n            return this;\n        }\n        return this.forEach(function (elem) {\n            var parent = referenceNode.parentNode;\n            if (parent.lastChild === referenceNode) {\n                // 最后一个元素\n                parent.appendChild(elem);\n            } else {\n                // 不是最后一个元素\n                parent.insertBefore(elem, referenceNode.nextSibling);\n            }\n        });\n    }\n};\n\n// new 一个对象\nfunction $(selector) {\n    return new DomElement(selector);\n}\n\n// 解绑所有事件，用于销毁编辑器\n$.offAll = function () {\n    eventList.forEach(function (item) {\n        var elem = item.elem;\n        var type = item.type;\n        var fn = item.fn;\n        // 解绑\n        elem.removeEventListener(type, fn);\n    });\n};\n\n/*\n    配置信息\n*/\n\nvar config = {\n\n    // 默认菜单配置\n    menus: ['head', 'bold', 'fontSize', 'fontName', 'italic', 'underline', 'strikeThrough', 'foreColor', 'backColor', 'link', 'list', 'justify', 'quote', 'emoticon', 'image', 'table', 'video', 'code', 'undo', 'redo'],\n\n    fontNames: ['宋体', '微软雅黑', 'Arial', 'Tahoma', 'Verdana'],\n\n    colors: ['#000000', '#eeece0', '#1c487f', '#4d80bf', '#c24f4a', '#8baa4a', '#7b5ba1', '#46acc8', '#f9963b', '#ffffff'],\n\n    // // 语言配置\n    // lang: {\n    //     '设置标题': 'title',\n    //     '正文': 'p',\n    //     '链接文字': 'link text',\n    //     '链接': 'link',\n    //     '插入': 'insert',\n    //     '创建': 'init'\n    // },\n\n    // 表情\n    emotions: [{\n        // tab 的标题\n        title: '默认',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            alt: '[坏笑]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/50/pcmoren_huaixiao_org.png'\n        }, {\n            alt: '[舔屏]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/40/pcmoren_tian_org.png'\n        }, {\n            alt: '[污]',\n            src: 'http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/3c/pcmoren_wu_org.png'\n        }]\n    }, {\n        // tab 的标题\n        title: '新浪',\n        // type -> 'emoji' / 'image'\n        type: 'image',\n        // content -> 数组\n        content: [{\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/7a/shenshou_thumb.gif',\n            alt: '[草泥马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/60/horse2_thumb.gif',\n            alt: '[神马]'\n        }, {\n            src: 'http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/bc/fuyun_thumb.gif',\n            alt: '[浮云]'\n        }]\n    }, {\n        // tab 的标题\n        title: 'emoji',\n        // type -> 'emoji' / 'image'\n        type: 'emoji',\n        // content -> 数组\n        content: '😀 😃 😄 😁 😆 😅 😂 😊 😇 🙂 🙃 😉 😓 😪 😴 🙄 🤔 😬 🤐'.split(/\\s/)\n    }],\n\n    // 编辑区域的 z-index\n    zIndex: 10000,\n\n    // 是否开启 debug 模式（debug 模式下错误会 throw error 形式抛出）\n    debug: false,\n\n    // 插入链接时候的格式校验\n    linkCheck: function linkCheck(text, link) {\n        // text 是插入的文字\n        // link 是插入的链接\n        return true; // 返回 true 即表示成功\n        // return '校验失败' // 返回字符串即表示失败的提示信息\n    },\n\n    // 插入网络图片的校验\n    linkImgCheck: function linkImgCheck(src) {\n        // src 即图片的地址\n        return true; // 返回 true 即表示成功\n        // return '校验失败'  // 返回字符串即表示失败的提示信息\n    },\n\n    // 粘贴过滤样式，默认开启\n    pasteFilterStyle: true,\n\n    // 粘贴内容时，忽略图片。默认关闭\n    pasteIgnoreImg: false,\n\n    // 对粘贴的文字进行自定义处理，返回处理后的结果。编辑器会将处理后的结果粘贴到编辑区域中。\n    // IE 暂时不支持\n    pasteTextHandle: function pasteTextHandle(content) {\n        // content 即粘贴过来的内容（html 或 纯文本），可进行自定义处理然后返回\n        return content;\n    },\n\n    // onchange 事件\n    // onchange: function (html) {\n    //     // html 即变化之后的内容\n    //     console.log(html)\n    // },\n\n    // 是否显示添加网络图片的 tab\n    showLinkImg: true,\n\n    // 插入网络图片的回调\n    linkImgCallback: function linkImgCallback(url) {\n        // console.log(url)  // url 即插入图片的地址\n    },\n\n    // 默认上传图片 max size: 5M\n    uploadImgMaxSize: 5 * 1024 * 1024,\n\n    // 配置一次最多上传几个图片\n    // uploadImgMaxLength: 5,\n\n    // 上传图片，是否显示 base64 格式\n    uploadImgShowBase64: false,\n\n    // 上传图片，server 地址（如果有值，则 base64 格式的配置则失效）\n    // uploadImgServer: '/upload',\n\n    // 自定义配置 filename\n    uploadFileName: '',\n\n    // 上传图片的自定义参数\n    uploadImgParams: {\n        // token: 'abcdef12345'\n    },\n\n    // 上传图片的自定义header\n    uploadImgHeaders: {\n        // 'Accept': 'text/x-json'\n    },\n\n    // 配置 XHR withCredentials\n    withCredentials: false,\n\n    // 自定义上传图片超时时间 ms\n    uploadImgTimeout: 10000,\n\n    // 上传图片 hook \n    uploadImgHooks: {\n        // customInsert: function (insertLinkImg, result, editor) {\n        //     console.log('customInsert')\n        //     // 图片上传并返回结果，自定义插入图片的事件，而不是编辑器自动插入图片\n        //     const data = result.data1 || []\n        //     data.forEach(link => {\n        //         insertLinkImg(link)\n        //     })\n        // },\n        before: function before(xhr, editor, files) {\n            // 图片上传之前触发\n\n            // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n            // return {\n            //     prevent: true,\n            //     msg: '放弃上传'\n            // }\n        },\n        success: function success(xhr, editor, result) {\n            // 图片上传并返回结果，图片插入成功之后触发\n        },\n        fail: function fail(xhr, editor, result) {\n            // 图片上传并返回结果，但图片插入错误时触发\n        },\n        error: function error(xhr, editor) {\n            // 图片上传出错时触发\n        },\n        timeout: function timeout(xhr, editor) {\n            // 图片上传超时时触发\n        }\n    },\n\n    // 是否上传七牛云，默认为 false\n    qiniu: false\n\n};\n\n/*\n    工具\n*/\n\n// 和 UA 相关的属性\nvar UA = {\n    _ua: navigator.userAgent,\n\n    // 是否 webkit\n    isWebkit: function isWebkit() {\n        var reg = /webkit/i;\n        return reg.test(this._ua);\n    },\n\n    // 是否 IE\n    isIE: function isIE() {\n        return 'ActiveXObject' in window;\n    }\n};\n\n// 遍历对象\nfunction objForEach(obj, fn) {\n    var key = void 0,\n        result = void 0;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result = fn.call(obj, key, obj[key]);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n}\n\n// 遍历类数组\nfunction arrForEach(fakeArr, fn) {\n    var i = void 0,\n        item = void 0,\n        result = void 0;\n    var length = fakeArr.length || 0;\n    for (i = 0; i < length; i++) {\n        item = fakeArr[i];\n        result = fn.call(fakeArr, item, i);\n        if (result === false) {\n            break;\n        }\n    }\n}\n\n// 获取随机数\nfunction getRandom(prefix) {\n    return prefix + Math.random().toString().slice(2);\n}\n\n// 替换 html 特殊字符\nfunction replaceHtmlSymbol(html) {\n    if (html == null) {\n        return '';\n    }\n    return html.replace(/</gm, '&lt;').replace(/>/gm, '&gt;').replace(/\"/gm, '&quot;').replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\n}\n\n// 返回百分比的格式\n\n\n// 判断是不是 function\nfunction isFunction(fn) {\n    return typeof fn === 'function';\n}\n\n/*\n    bold-menu\n*/\n// 构造函数\nfunction Bold(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-bold\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nBold.prototype = {\n    constructor: Bold,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 bold 命令\n        editor.cmd.do('bold');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('bold')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    替换多语言\n */\n\nvar replaceLang = function (editor, str) {\n    var langArgs = editor.config.langArgs || [];\n    var result = str;\n\n    langArgs.forEach(function (item) {\n        var reg = item.reg;\n        var val = item.val;\n\n        if (reg.test(result)) {\n            result = result.replace(reg, function () {\n                return val;\n            });\n        }\n    });\n\n    return result;\n};\n\n/*\n    droplist\n*/\nvar _emptyFn = function _emptyFn() {};\n\n// 构造函数\nfunction DropList(menu, opt) {\n    var _this = this;\n\n    // droplist 所依附的菜单\n    var editor = menu.editor;\n    this.menu = menu;\n    this.opt = opt;\n    // 容器\n    var $container = $('<div class=\"w-e-droplist\"></div>');\n\n    // 标题\n    var $title = opt.$title;\n    var titleHtml = void 0;\n    if ($title) {\n        // 替换多语言\n        titleHtml = $title.html();\n        titleHtml = replaceLang(editor, titleHtml);\n        $title.html(titleHtml);\n\n        $title.addClass('w-e-dp-title');\n        $container.append($title);\n    }\n\n    var list = opt.list || [];\n    var type = opt.type || 'list'; // 'list' 列表形式（如“标题”菜单） / 'inline-block' 块状形式（如“颜色”菜单）\n    var onClick = opt.onClick || _emptyFn;\n\n    // 加入 DOM 并绑定事件\n    var $list = $('<ul class=\"' + (type === 'list' ? 'w-e-list' : 'w-e-block') + '\"></ul>');\n    $container.append($list);\n    list.forEach(function (item) {\n        var $elem = item.$elem;\n\n        // 替换多语言\n        var elemHtml = $elem.html();\n        elemHtml = replaceLang(editor, elemHtml);\n        $elem.html(elemHtml);\n\n        var value = item.value;\n        var $li = $('<li class=\"w-e-item\"></li>');\n        if ($elem) {\n            $li.append($elem);\n            $list.append($li);\n            $li.on('click', function (e) {\n                onClick(value);\n\n                // 隐藏\n                _this.hideTimeoutId = setTimeout(function () {\n                    _this.hide();\n                }, 0);\n            });\n        }\n    });\n\n    // 绑定隐藏事件\n    $container.on('mouseleave', function (e) {\n        _this.hideTimeoutId = setTimeout(function () {\n            _this.hide();\n        }, 0);\n    });\n\n    // 记录属性\n    this.$container = $container;\n\n    // 基本属性\n    this._rendered = false;\n    this._show = false;\n}\n\n// 原型\nDropList.prototype = {\n    constructor: DropList,\n\n    // 显示（插入DOM）\n    show: function show() {\n        if (this.hideTimeoutId) {\n            // 清除之前的定时隐藏\n            clearTimeout(this.hideTimeoutId);\n        }\n\n        var menu = this.menu;\n        var $menuELem = menu.$elem;\n        var $container = this.$container;\n        if (this._show) {\n            return;\n        }\n        if (this._rendered) {\n            // 显示\n            $container.show();\n        } else {\n            // 加入 DOM 之前先定位位置\n            var menuHeight = $menuELem.getSizeData().height || 0;\n            var width = this.opt.width || 100; // 默认为 100\n            $container.css('margin-top', menuHeight + 'px').css('width', width + 'px');\n\n            // 加入到 DOM\n            $menuELem.append($container);\n            this._rendered = true;\n        }\n\n        // 修改属性\n        this._show = true;\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        if (this.showTimeoutId) {\n            // 清除之前的定时显示\n            clearTimeout(this.showTimeoutId);\n        }\n\n        var $container = this.$container;\n        if (!this._show) {\n            return;\n        }\n        // 隐藏并需改属性\n        $container.hide();\n        this._show = false;\n    }\n};\n\n/*\n    menu - header\n*/\n// 构造函数\nfunction Head(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-header\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>设置标题</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<h1>H1</h1>'), value: '<h1>' }, { $elem: $('<h2>H2</h2>'), value: '<h2>' }, { $elem: $('<h3>H3</h3>'), value: '<h3>' }, { $elem: $('<h4>H4</h4>'), value: '<h4>' }, { $elem: $('<h5>H5</h5>'), value: '<h5>' }, { $elem: $('<p>正文</p>'), value: '<p>' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 Head 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nHead.prototype = {\n    constructor: Head,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if (editor.$textElem.equal($selectionElem)) {\n            // 不能选中多行来设置标题，否则会出现问题\n            // 例如选中的是 <p>xxx</p><p>yyy</p> 来设置标题，设置之后会成为 <h1>xxx<br>yyy</h1> 不符合预期\n            return;\n        }\n\n        editor.cmd.do('formatBlock', value);\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^h/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - fontSize\n*/\n\n// 构造函数\nfunction FontSize(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-text-heigh\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 160,\n        $title: $('<p>字号</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span style=\"font-size: x-small;\">x-small</span>'), value: '1' }, { $elem: $('<span style=\"font-size: small;\">small</span>'), value: '2' }, { $elem: $('<span>normal</span>'), value: '3' }, { $elem: $('<span style=\"font-size: large;\">large</span>'), value: '4' }, { $elem: $('<span style=\"font-size: x-large;\">x-large</span>'), value: '5' }, { $elem: $('<span style=\"font-size: xx-large;\">xx-large</span>'), value: '6' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontSize 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontSize.prototype = {\n    constructor: FontSize,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontSize', value);\n    }\n};\n\n/*\n    menu - fontName\n*/\n\n// 构造函数\nfunction FontName(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-font\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 获取配置的字体\n    var config = editor.config;\n    var fontNames = config.fontNames || [];\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>字体</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: fontNames.map(function (fontName) {\n            return { $elem: $('<span style=\"font-family: ' + fontName + ';\">' + fontName + '</span>'), value: fontName };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 FontName 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nFontName.prototype = {\n    constructor: FontName,\n\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('fontName', value);\n    }\n};\n\n/*\n    panel\n*/\n\nvar emptyFn = function emptyFn() {};\n\n// 记录已经显示 panel 的菜单\nvar _isCreatedPanelMenus = [];\n\n// 构造函数\nfunction Panel(menu, opt) {\n    this.menu = menu;\n    this.opt = opt;\n}\n\n// 原型\nPanel.prototype = {\n    constructor: Panel,\n\n    // 显示（插入DOM）\n    show: function show() {\n        var _this = this;\n\n        var menu = this.menu;\n        if (_isCreatedPanelMenus.indexOf(menu) >= 0) {\n            // 该菜单已经创建了 panel 不能再创建\n            return;\n        }\n\n        var editor = menu.editor;\n        var $body = $('body');\n        var $textContainerElem = editor.$textContainerElem;\n        var opt = this.opt;\n\n        // panel 的容器\n        var $container = $('<div class=\"w-e-panel-container\"></div>');\n        var width = opt.width || 300; // 默认 300px\n        $container.css('width', width + 'px').css('margin-left', (0 - width) / 2 + 'px');\n\n        // 添加关闭按钮\n        var $closeBtn = $('<i class=\"w-e-icon-close w-e-panel-close\"></i>');\n        $container.append($closeBtn);\n        $closeBtn.on('click', function () {\n            _this.hide();\n        });\n\n        // 准备 tabs 容器\n        var $tabTitleContainer = $('<ul class=\"w-e-panel-tab-title\"></ul>');\n        var $tabContentContainer = $('<div class=\"w-e-panel-tab-content\"></div>');\n        $container.append($tabTitleContainer).append($tabContentContainer);\n\n        // 设置高度\n        var height = opt.height;\n        if (height) {\n            $tabContentContainer.css('height', height + 'px').css('overflow-y', 'auto');\n        }\n\n        // tabs\n        var tabs = opt.tabs || [];\n        var tabTitleArr = [];\n        var tabContentArr = [];\n        tabs.forEach(function (tab, tabIndex) {\n            if (!tab) {\n                return;\n            }\n            var title = tab.title || '';\n            var tpl = tab.tpl || '';\n\n            // 替换多语言\n            title = replaceLang(editor, title);\n            tpl = replaceLang(editor, tpl);\n\n            // 添加到 DOM\n            var $title = $('<li class=\"w-e-item\">' + title + '</li>');\n            $tabTitleContainer.append($title);\n            var $content = $(tpl);\n            $tabContentContainer.append($content);\n\n            // 记录到内存\n            $title._index = tabIndex;\n            tabTitleArr.push($title);\n            tabContentArr.push($content);\n\n            // 设置 active 项\n            if (tabIndex === 0) {\n                $title._active = true;\n                $title.addClass('w-e-active');\n            } else {\n                $content.hide();\n            }\n\n            // 绑定 tab 的事件\n            $title.on('click', function (e) {\n                if ($title._active) {\n                    return;\n                }\n                // 隐藏所有的 tab\n                tabTitleArr.forEach(function ($title) {\n                    $title._active = false;\n                    $title.removeClass('w-e-active');\n                });\n                tabContentArr.forEach(function ($content) {\n                    $content.hide();\n                });\n\n                // 显示当前的 tab\n                $title._active = true;\n                $title.addClass('w-e-active');\n                $content.show();\n            });\n        });\n\n        // 绑定关闭事件\n        $container.on('click', function (e) {\n            // 点击时阻止冒泡\n            e.stopPropagation();\n        });\n        $body.on('click', function (e) {\n            _this.hide();\n        });\n\n        // 添加到 DOM\n        $textContainerElem.append($container);\n\n        // 绑定 opt 的事件，只有添加到 DOM 之后才能绑定成功\n        tabs.forEach(function (tab, index) {\n            if (!tab) {\n                return;\n            }\n            var events = tab.events || [];\n            events.forEach(function (event) {\n                var selector = event.selector;\n                var type = event.type;\n                var fn = event.fn || emptyFn;\n                var $content = tabContentArr[index];\n                $content.find(selector).on(type, function (e) {\n                    e.stopPropagation();\n                    var needToHide = fn(e);\n                    // 执行完事件之后，是否要关闭 panel\n                    if (needToHide) {\n                        _this.hide();\n                    }\n                });\n            });\n        });\n\n        // focus 第一个 elem\n        var $inputs = $container.find('input[type=text],textarea');\n        if ($inputs.length) {\n            $inputs.get(0).focus();\n        }\n\n        // 添加到属性\n        this.$container = $container;\n\n        // 隐藏其他 panel\n        this._hideOtherPanels();\n        // 记录该 menu 已经创建了 panel\n        _isCreatedPanelMenus.push(menu);\n    },\n\n    // 隐藏（移除DOM）\n    hide: function hide() {\n        var menu = this.menu;\n        var $container = this.$container;\n        if ($container) {\n            $container.remove();\n        }\n\n        // 将该 menu 记录中移除\n        _isCreatedPanelMenus = _isCreatedPanelMenus.filter(function (item) {\n            if (item === menu) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n    },\n\n    // 一个 panel 展示时，隐藏其他 panel\n    _hideOtherPanels: function _hideOtherPanels() {\n        if (!_isCreatedPanelMenus.length) {\n            return;\n        }\n        _isCreatedPanelMenus.forEach(function (menu) {\n            var panel = menu.panel || {};\n            if (panel.hide) {\n                panel.hide();\n            }\n        });\n    }\n};\n\n/*\n    menu - link\n*/\n// 构造函数\nfunction Link(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-link\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nLink.prototype = {\n    constructor: Link,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $linkelem = void 0;\n\n        if (this._active) {\n            // 当前选区在链接里面\n            $linkelem = editor.selection.getSelectionContainerElem();\n            if (!$linkelem) {\n                return;\n            }\n            // 将该元素都包含在选取之内，以便后面整体替换\n            editor.selection.createRangeByElem($linkelem);\n            editor.selection.restoreSelection();\n            // 显示 panel\n            this._createPanel($linkelem.text(), $linkelem.attr('href'));\n        } else {\n            // 当前选区不在链接里面\n            if (editor.selection.isSelectionEmpty()) {\n                // 选区是空的，未选中内容\n                this._createPanel('', '');\n            } else {\n                // 选中内容了\n                this._createPanel(editor.selection.getSelectionText(), '');\n            }\n        }\n    },\n\n    // 创建 panel\n    _createPanel: function _createPanel(text, link) {\n        var _this = this;\n\n        // panel 中需要用到的id\n        var inputLinkId = getRandom('input-link');\n        var inputTextId = getRandom('input-text');\n        var btnOkId = getRandom('btn-ok');\n        var btnDelId = getRandom('btn-del');\n\n        // 是否显示“删除链接”\n        var delBtnDisplay = this._active ? 'inline-block' : 'none';\n\n        // 初始化并显示 panel\n        var panel = new Panel(this, {\n            width: 300,\n            // panel 中可包含多个 tab\n            tabs: [{\n                // tab 的标题\n                title: '链接',\n                // 模板\n                tpl: '<div>\\n                            <input id=\"' + inputTextId + '\" type=\"text\" class=\"block\" value=\"' + text + '\" placeholder=\"\\u94FE\\u63A5\\u6587\\u5B57\"/></td>\\n                            <input id=\"' + inputLinkId + '\" type=\"text\" class=\"block\" value=\"' + link + '\" placeholder=\"http://...\"/></td>\\n                            <div class=\"w-e-button-container\">\\n                                <button id=\"' + btnOkId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                                <button id=\"' + btnDelId + '\" class=\"gray right\" style=\"display:' + delBtnDisplay + '\">\\u5220\\u9664\\u94FE\\u63A5</button>\\n                            </div>\\n                        </div>',\n                // 事件绑定\n                events: [\n                // 插入链接\n                {\n                    selector: '#' + btnOkId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行插入链接\n                        var $link = $('#' + inputLinkId);\n                        var $text = $('#' + inputTextId);\n                        var link = $link.val();\n                        var text = $text.val();\n                        _this._insertLink(text, link);\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                },\n                // 删除链接\n                {\n                    selector: '#' + btnDelId,\n                    type: 'click',\n                    fn: function fn() {\n                        // 执行删除链接\n                        _this._delLink();\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // tab end\n            ] // tabs end\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 删除当前链接\n    _delLink: function _delLink() {\n        if (!this._active) {\n            return;\n        }\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var selectionText = editor.selection.getSelectionText();\n        editor.cmd.do('insertHTML', '<span>' + selectionText + '</span>');\n    },\n\n    // 插入链接\n    _insertLink: function _insertLink(text, link) {\n        var editor = this.editor;\n        var config = editor.config;\n        var linkCheck = config.linkCheck;\n        var checkResult = true; // 默认为 true\n        if (linkCheck && typeof linkCheck === 'function') {\n            checkResult = linkCheck(text, link);\n        }\n        if (checkResult === true) {\n            editor.cmd.do('insertHTML', '<a href=\"' + link + '\" target=\"_blank\">' + text + '</a>');\n        } else {\n            alert(checkResult);\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        if ($selectionELem.getNodeName() === 'A') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    italic-menu\n*/\n// 构造函数\nfunction Italic(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-italic\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nItalic.prototype = {\n    constructor: Italic,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 italic 命令\n        editor.cmd.do('italic');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('italic')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    redo-menu\n*/\n// 构造函数\nfunction Redo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-redo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nRedo.prototype = {\n    constructor: Redo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 redo 命令\n        editor.cmd.do('redo');\n    }\n};\n\n/*\n    strikeThrough-menu\n*/\n// 构造函数\nfunction StrikeThrough(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-strikethrough\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nStrikeThrough.prototype = {\n    constructor: StrikeThrough,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 strikeThrough 命令\n        editor.cmd.do('strikeThrough');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('strikeThrough')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    underline-menu\n*/\n// 构造函数\nfunction Underline(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-underline\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUnderline.prototype = {\n    constructor: Underline,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n\n        if (isSeleEmpty) {\n            // 选区是空的，插入并选中一个“空白”\n            editor.selection.createEmptyRange();\n        }\n\n        // 执行 underline 命令\n        editor.cmd.do('underline');\n\n        if (isSeleEmpty) {\n            // 需要将选取折叠起来\n            editor.selection.collapseRange();\n            editor.selection.restoreSelection();\n        }\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('underline')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    undo-menu\n*/\n// 构造函数\nfunction Undo(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-undo\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nUndo.prototype = {\n    constructor: Undo,\n\n    // 点击事件\n    onClick: function onClick(e) {\n        // 点击菜单将触发这里\n\n        var editor = this.editor;\n\n        // 执行 undo 命令\n        editor.cmd.do('undo');\n    }\n};\n\n/*\n    menu - list\n*/\n// 构造函数\nfunction List(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-list2\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>设置列表</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-list-numbered\"></i> 有序列表</span>'), value: 'insertOrderedList' }, { $elem: $('<span><i class=\"w-e-icon-list2\"></i> 无序列表</span>'), value: 'insertUnorderedList' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nList.prototype = {\n    constructor: List,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        editor.selection.restoreSelection();\n        if (editor.cmd.queryCommandState(value)) {\n            return;\n        }\n        editor.cmd.do(value);\n\n        // 验证列表是否被包裹在 <p> 之内\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        if ($selectionElem.getNodeName() === 'LI') {\n            $selectionElem = $selectionElem.parent();\n        }\n        if (/^ol|ul$/i.test($selectionElem.getNodeName()) === false) {\n            return;\n        }\n        if ($selectionElem.equal($textElem)) {\n            // 证明是顶级标签，没有被 <p> 包裹\n            return;\n        }\n        var $parent = $selectionElem.parent();\n        if ($parent.equal($textElem)) {\n            // $parent 是顶级标签，不能删除\n            return;\n        }\n\n        $selectionElem.insertAfter($parent);\n        $parent.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor.cmd.queryCommandState('insertUnOrderedList') || editor.cmd.queryCommandState('insertOrderedList')) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - justify\n*/\n// 构造函数\nfunction Justify(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paragraph-left\"></i></div>');\n    this.type = 'droplist';\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 100,\n        $title: $('<p>对齐方式</p>'),\n        type: 'list', // droplist 以列表形式展示\n        list: [{ $elem: $('<span><i class=\"w-e-icon-paragraph-left\"></i> 靠左</span>'), value: 'justifyLeft' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-center\"></i> 居中</span>'), value: 'justifyCenter' }, { $elem: $('<span><i class=\"w-e-icon-paragraph-right\"></i> 靠右</span>'), value: 'justifyRight' }],\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 List 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nJustify.prototype = {\n    constructor: Justify,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do(value);\n    }\n};\n\n/*\n    menu - Forecolor\n*/\n// 构造函数\nfunction ForeColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-pencil2\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>文字颜色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-pencil2\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 ForeColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nForeColor.prototype = {\n    constructor: ForeColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('foreColor', value);\n    }\n};\n\n/*\n    menu - BackColor\n*/\n// 构造函数\nfunction BackColor(editor) {\n    var _this = this;\n\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-paint-brush\"></i></div>');\n    this.type = 'droplist';\n\n    // 获取配置的颜色\n    var config = editor.config;\n    var colors = config.colors || [];\n\n    // 当前是否 active 状态\n    this._active = false;\n\n    // 初始化 droplist\n    this.droplist = new DropList(this, {\n        width: 120,\n        $title: $('<p>背景色</p>'),\n        type: 'inline-block', // droplist 内容以 block 形式展示\n        list: colors.map(function (color) {\n            return { $elem: $('<i style=\"color:' + color + ';\" class=\"w-e-icon-paint-brush\"></i>'), value: color };\n        }),\n        onClick: function onClick(value) {\n            // 注意 this 是指向当前的 BackColor 对象\n            _this._command(value);\n        }\n    });\n}\n\n// 原型\nBackColor.prototype = {\n    constructor: BackColor,\n\n    // 执行命令\n    _command: function _command(value) {\n        var editor = this.editor;\n        editor.cmd.do('backColor', value);\n    }\n};\n\n/*\n    menu - quote\n*/\n// 构造函数\nfunction Quote(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-quotes-left\"></i>\\n        </div>');\n    this.type = 'click';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nQuote.prototype = {\n    constructor: Quote,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $selectionElem = editor.selection.getSelectionContainerElem();\n        var nodeName = $selectionElem.getNodeName();\n\n        if (!UA.isIE()) {\n            if (nodeName === 'BLOCKQUOTE') {\n                // 撤销 quote\n                editor.cmd.do('formatBlock', '<P>');\n            } else {\n                // 转换为 quote\n                editor.cmd.do('formatBlock', '<BLOCKQUOTE>');\n            }\n            return;\n        }\n\n        // IE 中不支持 formatBlock <BLOCKQUOTE> ，要用其他方式兼容\n        var content = void 0,\n            $targetELem = void 0;\n        if (nodeName === 'P') {\n            // 将 P 转换为 quote\n            content = $selectionElem.text();\n            $targetELem = $('<blockquote>' + content + '</blockquote>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n            return;\n        }\n        if (nodeName === 'BLOCKQUOTE') {\n            // 撤销 quote\n            content = $selectionElem.text();\n            $targetELem = $('<p>' + content + '</p>');\n            $targetELem.insertAfter($selectionElem);\n            $selectionElem.remove();\n        }\n    },\n\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var reg = /^BLOCKQUOTE$/i;\n        var cmdValue = editor.cmd.queryCommandValue('formatBlock');\n        if (reg.test(cmdValue)) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - code\n*/\n// 构造函数\nfunction Code(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-terminal\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nCode.prototype = {\n    constructor: Code,\n\n    onClick: function onClick(e) {\n        var editor = this.editor;\n        var $startElem = editor.selection.getSelectionStartElem();\n        var $endElem = editor.selection.getSelectionEndElem();\n        var isSeleEmpty = editor.selection.isSelectionEmpty();\n        var selectionText = editor.selection.getSelectionText();\n        var $code = void 0;\n\n        if (!$startElem.equal($endElem)) {\n            // 跨元素选择，不做处理\n            editor.selection.restoreSelection();\n            return;\n        }\n        if (!isSeleEmpty) {\n            // 选取不是空，用 <code> 包裹即可\n            $code = $('<code>' + selectionText + '</code>');\n            editor.cmd.do('insertElem', $code);\n            editor.selection.createRangeByElem($code, false);\n            editor.selection.restoreSelection();\n            return;\n        }\n\n        // 选取是空，且没有夸元素选择，则插入 <pre><code></code></prev>\n        if (this._active) {\n            // 选中状态，将编辑内容\n            this._createPanel($startElem.html());\n        } else {\n            // 未选中状态，将创建内容\n            this._createPanel();\n        }\n    },\n\n    _createPanel: function _createPanel(value) {\n        var _this = this;\n\n        // value - 要编辑的内容\n        value = value || '';\n        var type = !value ? 'new' : 'edit';\n        var textId = getRandom('texxt');\n        var btnId = getRandom('btn');\n\n        var panel = new Panel(this, {\n            width: 500,\n            // 一个 Panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入代码',\n                // 模板\n                tpl: '<div>\\n                        <textarea id=\"' + textId + '\" style=\"height:145px;;\">' + value + '</textarea>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    <div>',\n                // 事件绑定\n                events: [\n                // 插入代码\n                {\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textId);\n                        var text = $text.val() || $text.html();\n                        text = replaceHtmlSymbol(text);\n                        if (type === 'new') {\n                            // 新插入\n                            _this._insertCode(text);\n                        } else {\n                            // 编辑更新\n                            _this._updateCode(text);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // new Panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入代码\n    _insertCode: function _insertCode(value) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', '<pre><code>' + value + '</code></pre><p><br></p>');\n    },\n\n    // 更新代码\n    _updateCode: function _updateCode(value) {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        $selectionELem.html(value);\n        editor.selection.restoreSelection();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $parentElem = $selectionELem.parent();\n        if ($selectionELem.getNodeName() === 'CODE' && $parentElem.getNodeName() === 'PRE') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - emoticon\n*/\n// 构造函数\nfunction Emoticon(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\">\\n            <i class=\"w-e-icon-happy\"></i>\\n        </div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nEmoticon.prototype = {\n    constructor: Emoticon,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config;\n        // 获取表情配置\n        var emotions = config.emotions || [];\n\n        // 创建表情 dropPanel 的配置\n        var tabConfig = [];\n        emotions.forEach(function (emotData) {\n            var emotType = emotData.type;\n            var content = emotData.content || [];\n\n            // 这一组表情最终拼接出来的 html\n            var faceHtml = '';\n\n            // emoji 表情\n            if (emotType === 'emoji') {\n                content.forEach(function (item) {\n                    if (item) {\n                        faceHtml += '<span class=\"w-e-item\">' + item + '</span>';\n                    }\n                });\n            }\n            // 图片表情\n            if (emotType === 'image') {\n                content.forEach(function (item) {\n                    var src = item.src;\n                    var alt = item.alt;\n                    if (src) {\n                        // 加一个 data-w-e 属性，点击图片的时候不再提示编辑图片\n                        faceHtml += '<span class=\"w-e-item\"><img src=\"' + src + '\" alt=\"' + alt + '\" data-w-e=\"1\"/></span>';\n                    }\n                });\n            }\n\n            tabConfig.push({\n                title: emotData.title,\n                tpl: '<div class=\"w-e-emoticon-container\">' + faceHtml + '</div>',\n                events: [{\n                    selector: 'span.w-e-item',\n                    type: 'click',\n                    fn: function fn(e) {\n                        var target = e.target;\n                        var $target = $(target);\n                        var nodeName = $target.getNodeName();\n\n                        var insertHtml = void 0;\n                        if (nodeName === 'IMG') {\n                            // 插入图片\n                            insertHtml = $target.parent().html();\n                        } else {\n                            // 插入 emoji\n                            insertHtml = '<span>' + $target.html() + '</span>';\n                        }\n\n                        _this._insert(insertHtml);\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            });\n        });\n\n        var panel = new Panel(this, {\n            width: 300,\n            height: 200,\n            // 一个 Panel 包含多个 tab\n            tabs: tabConfig\n        });\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表情\n    _insert: function _insert(emotHtml) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', emotHtml);\n    }\n};\n\n/*\n    menu - table\n*/\n// 构造函数\nfunction Table(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-table2\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nTable.prototype = {\n    constructor: Table,\n\n    onClick: function onClick() {\n        if (this._active) {\n            // 编辑现有表格\n            this._createEditPanel();\n        } else {\n            // 插入新表格\n            this._createInsertPanel();\n        }\n    },\n\n    // 创建插入新表格的 panel\n    _createInsertPanel: function _createInsertPanel() {\n        var _this = this;\n\n        // 用到的 id\n        var btnInsertId = getRandom('btn');\n        var textRowNum = getRandom('row');\n        var textColNum = getRandom('col');\n\n        var panel = new Panel(this, {\n            width: 250,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '插入表格',\n                // 模板\n                tpl: '<div>\\n                        <p style=\"text-align:left; padding:5px 0;\">\\n                            \\u521B\\u5EFA\\n                            <input id=\"' + textRowNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u884C\\n                            <input id=\"' + textColNum + '\" type=\"text\" value=\"5\" style=\"width:40px;text-align:center;\"/>\\n                            \\u5217\\u7684\\u8868\\u683C\\n                        </p>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnInsertId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 点击按钮，插入表格\n                    selector: '#' + btnInsertId,\n                    type: 'click',\n                    fn: function fn() {\n                        var rowNum = parseInt($('#' + textRowNum).val());\n                        var colNum = parseInt($('#' + textColNum).val());\n\n                        if (rowNum && colNum && rowNum > 0 && colNum > 0) {\n                            // form 数据有效\n                            _this._insert(rowNum, colNum);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 展示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入表格\n    _insert: function _insert(rowNum, colNum) {\n        // 拼接 table 模板\n        var r = void 0,\n            c = void 0;\n        var html = '<table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">';\n        for (r = 0; r < rowNum; r++) {\n            html += '<tr>';\n            if (r === 0) {\n                for (c = 0; c < colNum; c++) {\n                    html += '<th>&nbsp;</th>';\n                }\n            } else {\n                for (c = 0; c < colNum; c++) {\n                    html += '<td>&nbsp;</td>';\n                }\n            }\n            html += '</tr>';\n        }\n        html += '</table><p><br></p>';\n\n        // 执行命令\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', html);\n\n        // 防止 firefox 下出现 resize 的控制点\n        editor.cmd.do('enableObjectResizing', false);\n        editor.cmd.do('enableInlineTableEditing', false);\n    },\n\n    // 创建编辑表格的 panel\n    _createEditPanel: function _createEditPanel() {\n        var _this2 = this;\n\n        // 可用的 id\n        var addRowBtnId = getRandom('add-row');\n        var addColBtnId = getRandom('add-col');\n        var delRowBtnId = getRandom('del-row');\n        var delColBtnId = getRandom('del-col');\n        var delTableBtnId = getRandom('del-table');\n\n        // 创建 panel 对象\n        var panel = new Panel(this, {\n            width: 320,\n            // panel 包含多个 tab\n            tabs: [{\n                // 标题\n                title: '编辑表格',\n                // 模板\n                tpl: '<div>\\n                        <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                            <button id=\"' + addRowBtnId + '\" class=\"left\">\\u589E\\u52A0\\u884C</button>\\n                            <button id=\"' + delRowBtnId + '\" class=\"red left\">\\u5220\\u9664\\u884C</button>\\n                            <button id=\"' + addColBtnId + '\" class=\"left\">\\u589E\\u52A0\\u5217</button>\\n                            <button id=\"' + delColBtnId + '\" class=\"red left\">\\u5220\\u9664\\u5217</button>\\n                        </div>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + delTableBtnId + '\" class=\"gray left\">\\u5220\\u9664\\u8868\\u683C</button>\\n                        </dv>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    // 增加行\n                    selector: '#' + addRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 增加列\n                    selector: '#' + addColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._addCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除行\n                    selector: '#' + delRowBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delRow();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除列\n                    selector: '#' + delColBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delCol();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }, {\n                    // 删除表格\n                    selector: '#' + delTableBtnId,\n                    type: 'click',\n                    fn: function fn() {\n                        _this2._delTable();\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            }]\n        });\n        // 显示 panel\n        panel.show();\n    },\n\n    // 获取选中的单元格的位置信息\n    _getLocationData: function _getLocationData() {\n        var result = {};\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName !== 'TD' && nodeName !== 'TH') {\n            return;\n        }\n\n        // 获取 td index\n        var $tr = $selectionELem.parent();\n        var $tds = $tr.children();\n        var tdLength = $tds.length;\n        $tds.forEach(function (td, index) {\n            if (td === $selectionELem[0]) {\n                // 记录并跳出循环\n                result.td = {\n                    index: index,\n                    elem: td,\n                    length: tdLength\n                };\n                return false;\n            }\n        });\n\n        // 获取 tr index\n        var $tbody = $tr.parent();\n        var $trs = $tbody.children();\n        var trLength = $trs.length;\n        $trs.forEach(function (tr, index) {\n            if (tr === $tr[0]) {\n                // 记录并跳出循环\n                result.tr = {\n                    index: index,\n                    elem: tr,\n                    length: trLength\n                };\n                return false;\n            }\n        });\n\n        // 返回结果\n        return result;\n    },\n\n    // 增加行\n    _addRow: function _addRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        var tdData = locationData.td;\n        var tdLength = tdData.length;\n\n        // 拼接即将插入的字符串\n        var newTr = document.createElement('tr');\n        var tpl = '',\n            i = void 0;\n        for (i = 0; i < tdLength; i++) {\n            tpl += '<td>&nbsp;</td>';\n        }\n        newTr.innerHTML = tpl;\n        // 插入\n        $(newTr).insertAfter($currentTr);\n    },\n\n    // 增加列\n    _addCol: function _addCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            var name = $currentTd.getNodeName().toLowerCase();\n\n            // new 一个 td，并插入\n            var newTd = document.createElement(name);\n            $(newTd).insertAfter($currentTd);\n        });\n    },\n\n    // 删除行\n    _delRow: function _delRow() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var $currentTr = $(trData.elem);\n        $currentTr.remove();\n    },\n\n    // 删除列\n    _delCol: function _delCol() {\n        // 获取当前单元格的位置信息\n        var locationData = this._getLocationData();\n        if (!locationData) {\n            return;\n        }\n        var trData = locationData.tr;\n        var tdData = locationData.td;\n        var tdIndex = tdData.index;\n        var $currentTr = $(trData.elem);\n        var $trParent = $currentTr.parent();\n        var $trs = $trParent.children();\n\n        // 遍历所有行\n        $trs.forEach(function (tr) {\n            var $tr = $(tr);\n            var $tds = $tr.children();\n            var $currentTd = $tds.get(tdIndex);\n            // 删除\n            $currentTd.remove();\n        });\n    },\n\n    // 删除表格\n    _delTable: function _delTable() {\n        var editor = this.editor;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var $table = $selectionELem.parentUntil('table');\n        if (!$table) {\n            return;\n        }\n        $table.remove();\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        var $selectionELem = editor.selection.getSelectionContainerElem();\n        if (!$selectionELem) {\n            return;\n        }\n        var nodeName = $selectionELem.getNodeName();\n        if (nodeName === 'TD' || nodeName === 'TH') {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    menu - video\n*/\n// 构造函数\nfunction Video(editor) {\n    this.editor = editor;\n    this.$elem = $('<div class=\"w-e-menu\"><i class=\"w-e-icon-play\"></i></div>');\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nVideo.prototype = {\n    constructor: Video,\n\n    onClick: function onClick() {\n        this._createPanel();\n    },\n\n    _createPanel: function _createPanel() {\n        var _this = this;\n\n        // 创建 id\n        var textValId = getRandom('text-val');\n        var btnId = getRandom('btn');\n\n        // 创建 panel\n        var panel = new Panel(this, {\n            width: 350,\n            // 一个 panel 多个 tab\n            tabs: [{\n                // 标题\n                title: '插入视频',\n                // 模板\n                tpl: '<div>\\n                        <input id=\"' + textValId + '\" type=\"text\" class=\"block\" placeholder=\"\\u683C\\u5F0F\\u5982\\uFF1A<iframe src=... ></iframe>\"/>\\n                        <div class=\"w-e-button-container\">\\n                            <button id=\"' + btnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                        </div>\\n                    </div>',\n                // 事件绑定\n                events: [{\n                    selector: '#' + btnId,\n                    type: 'click',\n                    fn: function fn() {\n                        var $text = $('#' + textValId);\n                        var val = $text.val().trim();\n\n                        // 测试用视频地址\n                        // <iframe height=498 width=510 src='http://player.youku.com/embed/XMjcwMzc3MzM3Mg==' frameborder=0 'allowfullscreen'></iframe>\n\n                        if (val) {\n                            // 插入视频\n                            _this._insert(val);\n                        }\n\n                        // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                        return true;\n                    }\n                }]\n            } // first tab end\n            ] // tabs end\n        }); // panel end\n\n        // 显示 panel\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 插入视频\n    _insert: function _insert(val) {\n        var editor = this.editor;\n        editor.cmd.do('insertHTML', val + '<p><br></p>');\n    }\n};\n\n/*\n    menu - img\n*/\n// 构造函数\nfunction Image(editor) {\n    this.editor = editor;\n    var imgMenuId = getRandom('w-e-img');\n    this.$elem = $('<div class=\"w-e-menu\" id=\"' + imgMenuId + '\"><i class=\"w-e-icon-image\"></i></div>');\n    editor.imgMenuId = imgMenuId;\n    this.type = 'panel';\n\n    // 当前是否 active 状态\n    this._active = false;\n}\n\n// 原型\nImage.prototype = {\n    constructor: Image,\n\n    onClick: function onClick() {\n        var editor = this.editor;\n        var config = editor.config;\n        if (config.qiniu) {\n            return;\n        }\n        if (this._active) {\n            this._createEditPanel();\n        } else {\n            this._createInsertPanel();\n        }\n    },\n\n    _createEditPanel: function _createEditPanel() {\n        var editor = this.editor;\n\n        // id\n        var width30 = getRandom('width-30');\n        var width50 = getRandom('width-50');\n        var width100 = getRandom('width-100');\n        var delBtn = getRandom('del-btn');\n\n        // tab 配置\n        var tabsConfig = [{\n            title: '编辑图片',\n            tpl: '<div>\\n                    <div class=\"w-e-button-container\" style=\"border-bottom:1px solid #f1f1f1;padding-bottom:5px;margin-bottom:5px;\">\\n                        <span style=\"float:left;font-size:14px;margin:4px 5px 0 5px;color:#333;\">\\u6700\\u5927\\u5BBD\\u5EA6\\uFF1A</span>\\n                        <button id=\"' + width30 + '\" class=\"left\">30%</button>\\n                        <button id=\"' + width50 + '\" class=\"left\">50%</button>\\n                        <button id=\"' + width100 + '\" class=\"left\">100%</button>\\n                    </div>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + delBtn + '\" class=\"gray left\">\\u5220\\u9664\\u56FE\\u7247</button>\\n                    </dv>\\n                </div>',\n            events: [{\n                selector: '#' + width30,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '30%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width50,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '50%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + width100,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.css('max-width', '100%');\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }, {\n                selector: '#' + delBtn,\n                type: 'click',\n                fn: function fn() {\n                    var $img = editor._selectedImg;\n                    if ($img) {\n                        $img.remove();\n                    }\n                    // 返回 true，表示该事件执行完之后，panel 要关闭。否则 panel 不会关闭\n                    return true;\n                }\n            }]\n        }];\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfig\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    _createInsertPanel: function _createInsertPanel() {\n        var editor = this.editor;\n        var uploadImg = editor.uploadImg;\n        var config = editor.config;\n\n        // id\n        var upTriggerId = getRandom('up-trigger');\n        var upFileId = getRandom('up-file');\n        var linkUrlId = getRandom('link-url');\n        var linkBtnId = getRandom('link-btn');\n\n        // tabs 的配置\n        var tabsConfig = [{\n            title: '上传图片',\n            tpl: '<div class=\"w-e-up-img-container\">\\n                    <div id=\"' + upTriggerId + '\" class=\"w-e-up-btn\">\\n                        <i class=\"w-e-icon-upload2\"></i>\\n                    </div>\\n                    <div style=\"display:none;\">\\n                        <input id=\"' + upFileId + '\" type=\"file\" multiple=\"multiple\" accept=\"image/jpg,image/jpeg,image/png,image/gif,image/bmp\"/>\\n                    </div>\\n                </div>',\n            events: [{\n                // 触发选择图片\n                selector: '#' + upTriggerId,\n                type: 'click',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (fileElem) {\n                        fileElem.click();\n                    } else {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n                }\n            }, {\n                // 选择图片完毕\n                selector: '#' + upFileId,\n                type: 'change',\n                fn: function fn() {\n                    var $file = $('#' + upFileId);\n                    var fileElem = $file[0];\n                    if (!fileElem) {\n                        // 返回 true 可关闭 panel\n                        return true;\n                    }\n\n                    // 获取选中的 file 对象列表\n                    var fileList = fileElem.files;\n                    if (fileList.length) {\n                        uploadImg.uploadImg(fileList);\n                    }\n\n                    // 返回 true 可关闭 panel\n                    return true;\n                }\n            }]\n        }, // first tab end\n        {\n            title: '网络图片',\n            tpl: '<div>\\n                    <input id=\"' + linkUrlId + '\" type=\"text\" class=\"block\" placeholder=\"\\u56FE\\u7247\\u94FE\\u63A5\"/></td>\\n                    <div class=\"w-e-button-container\">\\n                        <button id=\"' + linkBtnId + '\" class=\"right\">\\u63D2\\u5165</button>\\n                    </div>\\n                </div>',\n            events: [{\n                selector: '#' + linkBtnId,\n                type: 'click',\n                fn: function fn() {\n                    var $linkUrl = $('#' + linkUrlId);\n                    var url = $linkUrl.val().trim();\n\n                    if (url) {\n                        uploadImg.insertLinkImg(url);\n                    }\n\n                    // 返回 true 表示函数执行结束之后关闭 panel\n                    return true;\n                }\n            }]\n        } // second tab end\n        ]; // tabs end\n\n        // 判断 tabs 的显示\n        var tabsConfigResult = [];\n        if ((config.uploadImgShowBase64 || config.uploadImgServer || config.customUploadImg) && window.FileReader) {\n            // 显示“上传图片”\n            tabsConfigResult.push(tabsConfig[0]);\n        }\n        if (config.showLinkImg) {\n            // 显示“网络图片”\n            tabsConfigResult.push(tabsConfig[1]);\n        }\n\n        // 创建 panel 并显示\n        var panel = new Panel(this, {\n            width: 300,\n            tabs: tabsConfigResult\n        });\n        panel.show();\n\n        // 记录属性\n        this.panel = panel;\n    },\n\n    // 试图改变 active 状态\n    tryChangeActive: function tryChangeActive(e) {\n        var editor = this.editor;\n        var $elem = this.$elem;\n        if (editor._selectedImg) {\n            this._active = true;\n            $elem.addClass('w-e-active');\n        } else {\n            this._active = false;\n            $elem.removeClass('w-e-active');\n        }\n    }\n};\n\n/*\n    所有菜单的汇总\n*/\n\n// 存储菜单的构造函数\nvar MenuConstructors = {};\n\nMenuConstructors.bold = Bold;\n\nMenuConstructors.head = Head;\n\nMenuConstructors.fontSize = FontSize;\n\nMenuConstructors.fontName = FontName;\n\nMenuConstructors.link = Link;\n\nMenuConstructors.italic = Italic;\n\nMenuConstructors.redo = Redo;\n\nMenuConstructors.strikeThrough = StrikeThrough;\n\nMenuConstructors.underline = Underline;\n\nMenuConstructors.undo = Undo;\n\nMenuConstructors.list = List;\n\nMenuConstructors.justify = Justify;\n\nMenuConstructors.foreColor = ForeColor;\n\nMenuConstructors.backColor = BackColor;\n\nMenuConstructors.quote = Quote;\n\nMenuConstructors.code = Code;\n\nMenuConstructors.emoticon = Emoticon;\n\nMenuConstructors.table = Table;\n\nMenuConstructors.video = Video;\n\nMenuConstructors.image = Image;\n\n/*\n    菜单集合\n*/\n// 构造函数\nfunction Menus(editor) {\n    this.editor = editor;\n    this.menus = {};\n}\n\n// 修改原型\nMenus.prototype = {\n    constructor: Menus,\n\n    // 初始化菜单\n    init: function init() {\n        var _this = this;\n\n        var editor = this.editor;\n        var config = editor.config || {};\n        var configMenus = config.menus || []; // 获取配置中的菜单\n\n        // 根据配置信息，创建菜单\n        configMenus.forEach(function (menuKey) {\n            var MenuConstructor = MenuConstructors[menuKey];\n            if (MenuConstructor && typeof MenuConstructor === 'function') {\n                // 创建单个菜单\n                _this.menus[menuKey] = new MenuConstructor(editor);\n            }\n        });\n\n        // 添加到菜单栏\n        this._addToToolbar();\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 添加到菜单栏\n    _addToToolbar: function _addToToolbar() {\n        var editor = this.editor;\n        var $toolbarElem = editor.$toolbarElem;\n        var menus = this.menus;\n        var config = editor.config;\n        // config.zIndex 是配置的编辑区域的 z-index，菜单的 z-index 得在其基础上 +1\n        var zIndex = config.zIndex + 1;\n        objForEach(menus, function (key, menu) {\n            var $elem = menu.$elem;\n            if ($elem) {\n                // 设置 z-index\n                $elem.css('z-index', zIndex);\n                $toolbarElem.append($elem);\n            }\n        });\n    },\n\n    // 绑定菜单 click mouseenter 事件\n    _bindEvent: function _bindEvent() {\n        var menus = this.menus;\n        var editor = this.editor;\n        objForEach(menus, function (key, menu) {\n            var type = menu.type;\n            if (!type) {\n                return;\n            }\n            var $elem = menu.$elem;\n            var droplist = menu.droplist;\n            var panel = menu.panel;\n\n            // 点击类型，例如 bold\n            if (type === 'click' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    menu.onClick(e);\n                });\n            }\n\n            // 下拉框，例如 head\n            if (type === 'droplist' && droplist) {\n                $elem.on('mouseenter', function (e) {\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 显示\n                    droplist.showTimeoutId = setTimeout(function () {\n                        droplist.show();\n                    }, 200);\n                }).on('mouseleave', function (e) {\n                    // 隐藏\n                    droplist.hideTimeoutId = setTimeout(function () {\n                        droplist.hide();\n                    }, 0);\n                });\n            }\n\n            // 弹框类型，例如 link\n            if (type === 'panel' && menu.onClick) {\n                $elem.on('click', function (e) {\n                    e.stopPropagation();\n                    if (editor.selection.getRange() == null) {\n                        return;\n                    }\n                    // 在自定义事件中显示 panel\n                    menu.onClick(e);\n                });\n            }\n        });\n    },\n\n    // 尝试修改菜单状态\n    changeActive: function changeActive() {\n        var menus = this.menus;\n        objForEach(menus, function (key, menu) {\n            if (menu.tryChangeActive) {\n                setTimeout(function () {\n                    menu.tryChangeActive();\n                }, 100);\n            }\n        });\n    }\n};\n\n/*\n    粘贴信息的处理\n*/\n\n// 获取粘贴的纯文本\nfunction getPasteText(e) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n    }\n\n    return replaceHtmlSymbol(pasteText);\n}\n\n// 获取粘贴的html\nfunction getPasteHtml(e, filterStyle, ignoreImg) {\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData;\n    var pasteText = void 0,\n        pasteHtml = void 0;\n    if (clipboardData == null) {\n        pasteText = window.clipboardData && window.clipboardData.getData('text');\n    } else {\n        pasteText = clipboardData.getData('text/plain');\n        pasteHtml = clipboardData.getData('text/html');\n    }\n    if (!pasteHtml && pasteText) {\n        pasteHtml = '<p>' + replaceHtmlSymbol(pasteText) + '</p>';\n    }\n    if (!pasteHtml) {\n        return;\n    }\n\n    // 过滤word中状态过来的无用字符\n    var docSplitHtml = pasteHtml.split('</html>');\n    if (docSplitHtml.length === 2) {\n        pasteHtml = docSplitHtml[0];\n    }\n\n    // 过滤无用标签\n    pasteHtml = pasteHtml.replace(/<(meta|script|link).+?>/igm, '');\n    // 去掉注释\n    pasteHtml = pasteHtml.replace(/<!--.*?-->/mg, '');\n    // 过滤 data-xxx 属性\n    pasteHtml = pasteHtml.replace(/\\s?data-.+?=('|\").+?('|\")/igm, '');\n\n    if (ignoreImg) {\n        // 忽略图片\n        pasteHtml = pasteHtml.replace(/<img.+?>/igm, '');\n    }\n\n    if (filterStyle) {\n        // 过滤样式\n        pasteHtml = pasteHtml.replace(/\\s?(class|style)=('|\").*?('|\")/igm, '');\n    } else {\n        // 保留样式\n        pasteHtml = pasteHtml.replace(/\\s?class=('|\").*?('|\")/igm, '');\n    }\n\n    return pasteHtml;\n}\n\n// 获取粘贴的图片文件\nfunction getPasteImgs(e) {\n    var result = [];\n    var txt = getPasteText(e);\n    if (txt) {\n        // 有文字，就忽略图片\n        return result;\n    }\n\n    var clipboardData = e.clipboardData || e.originalEvent && e.originalEvent.clipboardData || {};\n    var items = clipboardData.items;\n    if (!items) {\n        return result;\n    }\n\n    objForEach(items, function (key, value) {\n        var type = value.type;\n        if (/image/i.test(type)) {\n            result.push(value.getAsFile());\n        }\n    });\n\n    return result;\n}\n\n/*\n    编辑区域\n*/\n\n// 获取一个 elem.childNodes 的 JSON 数据\nfunction getChildrenJSON($elem) {\n    var result = [];\n    var $children = $elem.childNodes() || []; // 注意 childNodes() 可以获取文本节点\n    $children.forEach(function (curElem) {\n        var elemResult = void 0;\n        var nodeType = curElem.nodeType;\n\n        // 文本节点\n        if (nodeType === 3) {\n            elemResult = curElem.textContent;\n            elemResult = replaceHtmlSymbol(elemResult);\n        }\n\n        // 普通 DOM 节点\n        if (nodeType === 1) {\n            elemResult = {};\n\n            // tag\n            elemResult.tag = curElem.nodeName.toLowerCase();\n            // attr\n            var attrData = [];\n            var attrList = curElem.attributes || {};\n            var attrListLength = attrList.length || 0;\n            for (var i = 0; i < attrListLength; i++) {\n                var attr = attrList[i];\n                attrData.push({\n                    name: attr.name,\n                    value: attr.value\n                });\n            }\n            elemResult.attrs = attrData;\n            // children（递归）\n            elemResult.children = getChildrenJSON($(curElem));\n        }\n\n        result.push(elemResult);\n    });\n    return result;\n}\n\n// 构造函数\nfunction Text(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nText.prototype = {\n    constructor: Text,\n\n    // 初始化\n    init: function init() {\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 清空内容\n    clear: function clear() {\n        this.html('<p><br></p>');\n    },\n\n    // 获取 设置 html\n    html: function html(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var html = void 0;\n        if (val == null) {\n            html = $textElem.html();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            html = html.replace(/\\u200b/gm, '');\n            return html;\n        } else {\n            $textElem.html(val);\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 获取 JSON\n    getJSON: function getJSON() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        return getChildrenJSON($textElem);\n    },\n\n    // 获取 设置 text\n    text: function text(val) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        var text = void 0;\n        if (val == null) {\n            text = $textElem.text();\n            // 未选中任何内容的时候点击“加粗”或者“斜体”等按钮，就得需要一个空的占位符 &#8203 ，这里替换掉\n            text = text.replace(/\\u200b/gm, '');\n            return text;\n        } else {\n            $textElem.text('<p>' + val + '</p>');\n\n            // 初始化选取，将光标定位到内容尾部\n            editor.initSelection();\n        }\n    },\n\n    // 追加内容\n    append: function append(html) {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        $textElem.append($(html));\n\n        // 初始化选取，将光标定位到内容尾部\n        editor.initSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // 实时保存选取\n        this._saveRangeRealTime();\n\n        // 按回车建时的特殊处理\n        this._enterKeyHandle();\n\n        // 清空时保留 <p><br></p>\n        this._clearHandle();\n\n        // 粘贴事件（粘贴文字，粘贴图片）\n        this._pasteHandle();\n\n        // tab 特殊处理\n        this._tabHandle();\n\n        // img 点击\n        this._imgHandle();\n\n        // 拖拽事件\n        this._dragHandle();\n    },\n\n    // 实时保存选取\n    _saveRangeRealTime: function _saveRangeRealTime() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 保存当前的选区\n        function saveRange(e) {\n            // 随时保存选区\n            editor.selection.saveRange();\n            // 更新按钮 ative 状态\n            editor.menus.changeActive();\n        }\n        // 按键后保存\n        $textElem.on('keyup', saveRange);\n        $textElem.on('mousedown', function (e) {\n            // mousedown 状态下，鼠标滑动到编辑区域外面，也需要保存选区\n            $textElem.on('mouseleave', saveRange);\n        });\n        $textElem.on('mouseup', function (e) {\n            saveRange();\n            // 在编辑器区域之内完成点击，取消鼠标滑动到编辑区外面的事件\n            $textElem.off('mouseleave', saveRange);\n        });\n    },\n\n    // 按回车键时的特殊处理\n    _enterKeyHandle: function _enterKeyHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        function insertEmptyP($selectionElem) {\n            var $p = $('<p><br></p>');\n            $p.insertBefore($selectionElem);\n            editor.selection.createRangeByElem($p, true);\n            editor.selection.restoreSelection();\n            $selectionElem.remove();\n        }\n\n        // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n        function pHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            var $parentElem = $selectionElem.parent();\n\n            if ($parentElem.html() === '<code><br></code>') {\n                // 回车之前光标所在一个 <p><code>.....</code></p> ，忽然回车生成一个空的 <p><code><br></code></p>\n                // 而且继续回车跳不出去，因此只能特殊处理\n                insertEmptyP($selectionElem);\n                return;\n            }\n\n            if (!$parentElem.equal($textElem)) {\n                // 不是顶级标签\n                return;\n            }\n\n            var nodeName = $selectionElem.getNodeName();\n            if (nodeName === 'P') {\n                // 当前的标签是 P ，不用做处理\n                return;\n            }\n\n            if ($selectionElem.text()) {\n                // 有内容，不做处理\n                return;\n            }\n\n            // 插入 <p> ，并将选取定位到 <p>，删除当前标签\n            insertEmptyP($selectionElem);\n        }\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                return;\n            }\n            // 将回车之后生成的非 <p> 的顶级标签，改为 <p>\n            pHandle(e);\n        });\n\n        // <pre><code></code></pre> 回车时 特殊处理\n        function codeHandle(e) {\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName !== 'CODE' || parentNodeName !== 'PRE') {\n                // 不符合要求 忽略\n                return;\n            }\n\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n\n            // 处理：光标定位到代码末尾，联系点击两次回车，即跳出代码块\n            if (editor._willBreakCode === true) {\n                // 此时可以跳出代码块\n                // 插入 <p> ，并将选取定位到 <p>\n                var $p = $('<p><br></p>');\n                $p.insertAfter($parentElem);\n                editor.selection.createRangeByElem($p, true);\n                editor.selection.restoreSelection();\n\n                // 修改状态\n                editor._willBreakCode = false;\n\n                e.preventDefault();\n                return;\n            }\n\n            var _startOffset = editor.selection.getRange().startOffset;\n\n            // 处理：回车时，不能插入 <br> 而是插入 \\n ，因为是在 pre 标签里面\n            editor.cmd.do('insertHTML', '\\n');\n            editor.selection.saveRange();\n            if (editor.selection.getRange().startOffset === _startOffset) {\n                // 没起作用，再来一遍\n                editor.cmd.do('insertHTML', '\\n');\n            }\n\n            var codeLength = $selectionElem.html().length;\n            if (editor.selection.getRange().startOffset + 1 === codeLength) {\n                // 说明光标在代码最后的位置，执行了回车操作\n                // 记录下来，以便下次回车时候跳出 code\n                editor._willBreakCode = true;\n            }\n\n            // 阻止默认行为\n            e.preventDefault();\n        }\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 13) {\n                // 不是回车键\n                // 取消即将跳转代码块的记录\n                editor._willBreakCode = false;\n                return;\n            }\n            // <pre><code></code></pre> 回车时 特殊处理\n            codeHandle(e);\n        });\n    },\n\n    // 清空时保留 <p><br></p>\n    _clearHandle: function _clearHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var txtHtml = $textElem.html().toLowerCase().trim();\n            if (txtHtml === '<p><br></p>') {\n                // 最后剩下一个空行，就不再删除了\n                e.preventDefault();\n                return;\n            }\n        });\n\n        $textElem.on('keyup', function (e) {\n            if (e.keyCode !== 8) {\n                return;\n            }\n            var $p = void 0;\n            var txtHtml = $textElem.html().toLowerCase().trim();\n\n            // firefox 时用 txtHtml === '<br>' 判断，其他用 !txtHtml 判断\n            if (!txtHtml || txtHtml === '<br>') {\n                // 内容空了\n                $p = $('<p><br/></p>');\n                $textElem.html(''); // 一定要先清空，否则在 firefox 下有问题\n                $textElem.append($p);\n                editor.selection.createRangeByElem($p, false, true);\n                editor.selection.restoreSelection();\n            }\n        });\n    },\n\n    // 粘贴事件（粘贴文字 粘贴图片）\n    _pasteHandle: function _pasteHandle() {\n        var editor = this.editor;\n        var config = editor.config;\n        var pasteFilterStyle = config.pasteFilterStyle;\n        var pasteTextHandle = config.pasteTextHandle;\n        var ignoreImg = config.pasteIgnoreImg;\n        var $textElem = editor.$textElem;\n\n        // 粘贴图片、文本的事件，每次只能执行一个\n        // 判断该次粘贴事件是否可以执行\n        var pasteTime = 0;\n        function canDo() {\n            var now = Date.now();\n            var flag = false;\n            if (now - pasteTime >= 100) {\n                // 间隔大于 100 ms ，可以执行\n                flag = true;\n            }\n            pasteTime = now;\n            return flag;\n        }\n        function resetTime() {\n            pasteTime = 0;\n        }\n\n        // 粘贴文字\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                // 阻止默认行为，使用 execCommand 的粘贴命令\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的文字\n            var pasteHtml = getPasteHtml(e, pasteFilterStyle, ignoreImg);\n            var pasteText = getPasteText(e);\n            pasteText = pasteText.replace(/\\n/gm, '<br>');\n\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中只能粘贴纯文本\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n                return;\n            }\n\n            // 先放开注释，有问题再追查 ————\n            // // 表格中忽略，可能会出现异常问题\n            // if (nodeName === 'TD' || nodeName === 'TH') {\n            //     return\n            // }\n\n            if (!pasteHtml) {\n                // 没有内容，可继续执行下面的图片粘贴\n                resetTime();\n                return;\n            }\n            try {\n                // firefox 中，获取的 pasteHtml 可能是没有 <ul> 包裹的 <li>\n                // 因此执行 insertHTML 会报错\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteHtml = '' + (pasteTextHandle(pasteHtml) || '');\n                }\n                editor.cmd.do('insertHTML', pasteHtml);\n            } catch (ex) {\n                // 此时使用 pasteText 来兼容一下\n                if (pasteTextHandle && isFunction(pasteTextHandle)) {\n                    // 用户自定义过滤处理粘贴内容\n                    pasteText = '' + (pasteTextHandle(pasteText) || '');\n                }\n                editor.cmd.do('insertHTML', '<p>' + pasteText + '</p>');\n            }\n        });\n\n        // 粘贴图片\n        $textElem.on('paste', function (e) {\n            if (UA.isIE()) {\n                return;\n            } else {\n                e.preventDefault();\n            }\n\n            // 粘贴图片和文本，只能同时使用一个\n            if (!canDo()) {\n                return;\n            }\n\n            // 获取粘贴的图片\n            var pasteFiles = getPasteImgs(e);\n            if (!pasteFiles || !pasteFiles.length) {\n                return;\n            }\n\n            // 获取当前的元素\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var nodeName = $selectionElem.getNodeName();\n\n            // code 中粘贴忽略\n            if (nodeName === 'CODE' || nodeName === 'PRE') {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(pasteFiles);\n        });\n    },\n\n    // tab 特殊处理\n    _tabHandle: function _tabHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        $textElem.on('keydown', function (e) {\n            if (e.keyCode !== 9) {\n                return;\n            }\n            if (!editor.cmd.queryCommandSupported('insertHTML')) {\n                // 必须原生支持 insertHTML 命令\n                return;\n            }\n            var $selectionElem = editor.selection.getSelectionContainerElem();\n            if (!$selectionElem) {\n                return;\n            }\n            var $parentElem = $selectionElem.parent();\n            var selectionNodeName = $selectionElem.getNodeName();\n            var parentNodeName = $parentElem.getNodeName();\n\n            if (selectionNodeName === 'CODE' && parentNodeName === 'PRE') {\n                // <pre><code> 里面\n                editor.cmd.do('insertHTML', '    ');\n            } else {\n                // 普通文字\n                editor.cmd.do('insertHTML', '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            e.preventDefault();\n        });\n    },\n\n    // img 点击\n    _imgHandle: function _imgHandle() {\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n\n        // 为图片增加 selected 样式\n        $textElem.on('click', 'img', function (e) {\n            var img = this;\n            var $img = $(img);\n\n            if ($img.attr('data-w-e') === '1') {\n                // 是表情图片，忽略\n                return;\n            }\n\n            // 记录当前点击过的图片\n            editor._selectedImg = $img;\n\n            // 修改选区并 restore ，防止用户此时点击退格键，会删除其他内容\n            editor.selection.createRangeByElem($img);\n            editor.selection.restoreSelection();\n        });\n\n        // 去掉图片的 selected 样式\n        $textElem.on('click  keyup', function (e) {\n            if (e.target.matches('img')) {\n                // 点击的是图片，忽略\n                return;\n            }\n            // 删除记录\n            editor._selectedImg = null;\n        });\n    },\n\n    // 拖拽事件\n    _dragHandle: function _dragHandle() {\n        var editor = this.editor;\n\n        // 禁用 document 拖拽事件\n        var $document = $(document);\n        $document.on('dragleave drop dragenter dragover', function (e) {\n            e.preventDefault();\n        });\n\n        // 添加编辑区域拖拽事件\n        var $textElem = editor.$textElem;\n        $textElem.on('drop', function (e) {\n            e.preventDefault();\n            var files = e.dataTransfer && e.dataTransfer.files;\n            if (!files || !files.length) {\n                return;\n            }\n\n            // 上传图片\n            var uploadImg = editor.uploadImg;\n            uploadImg.uploadImg(files);\n        });\n    }\n};\n\n/*\n    命令，封装 document.execCommand\n*/\n\n// 构造函数\nfunction Command(editor) {\n    this.editor = editor;\n}\n\n// 修改原型\nCommand.prototype = {\n    constructor: Command,\n\n    // 执行命令\n    do: function _do(name, value) {\n        var editor = this.editor;\n\n        // 使用 styleWithCSS\n        if (!editor._useStyleWithCSS) {\n            document.execCommand('styleWithCSS', null, true);\n            editor._useStyleWithCSS = true;\n        }\n\n        // 如果无选区，忽略\n        if (!editor.selection.getRange()) {\n            return;\n        }\n\n        // 恢复选取\n        editor.selection.restoreSelection();\n\n        // 执行\n        var _name = '_' + name;\n        if (this[_name]) {\n            // 有自定义事件\n            this[_name](value);\n        } else {\n            // 默认 command\n            this._execCommand(name, value);\n        }\n\n        // 修改菜单状态\n        editor.menus.changeActive();\n\n        // 最后，恢复选取保证光标在原来的位置闪烁\n        editor.selection.saveRange();\n        editor.selection.restoreSelection();\n\n        // 触发 onchange\n        editor.change && editor.change();\n    },\n\n    // 自定义 insertHTML 事件\n    _insertHTML: function _insertHTML(html) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (this.queryCommandSupported('insertHTML')) {\n            // W3C\n            this._execCommand('insertHTML', html);\n        } else if (range.insertNode) {\n            // IE\n            range.deleteContents();\n            range.insertNode($(html)[0]);\n        } else if (range.pasteHTML) {\n            // IE <= 10\n            range.pasteHTML(html);\n        }\n    },\n\n    // 插入 elem\n    _insertElem: function _insertElem($elem) {\n        var editor = this.editor;\n        var range = editor.selection.getRange();\n\n        if (range.insertNode) {\n            range.deleteContents();\n            range.insertNode($elem[0]);\n        }\n    },\n\n    // 封装 execCommand\n    _execCommand: function _execCommand(name, value) {\n        document.execCommand(name, false, value);\n    },\n\n    // 封装 document.queryCommandValue\n    queryCommandValue: function queryCommandValue(name) {\n        return document.queryCommandValue(name);\n    },\n\n    // 封装 document.queryCommandState\n    queryCommandState: function queryCommandState(name) {\n        return document.queryCommandState(name);\n    },\n\n    // 封装 document.queryCommandSupported\n    queryCommandSupported: function queryCommandSupported(name) {\n        return document.queryCommandSupported(name);\n    }\n};\n\n/*\n    selection range API\n*/\n\n// 构造函数\nfunction API(editor) {\n    this.editor = editor;\n    this._currentRange = null;\n}\n\n// 修改原型\nAPI.prototype = {\n    constructor: API,\n\n    // 获取 range 对象\n    getRange: function getRange() {\n        return this._currentRange;\n    },\n\n    // 保存选区\n    saveRange: function saveRange(_range) {\n        if (_range) {\n            // 保存已有选区\n            this._currentRange = _range;\n            return;\n        }\n\n        // 获取当前的选区\n        var selection = window.getSelection();\n        if (selection.rangeCount === 0) {\n            return;\n        }\n        var range = selection.getRangeAt(0);\n\n        // 判断选区内容是否在编辑内容之内\n        var $containerElem = this.getSelectionContainerElem(range);\n        if (!$containerElem) {\n            return;\n        }\n\n        // 判断选区内容是否在不可编辑区域之内\n        if ($containerElem.attr('contenteditable') === 'false' || $containerElem.parentUntil('[contenteditable=false]')) {\n            return;\n        }\n\n        var editor = this.editor;\n        var $textElem = editor.$textElem;\n        if ($textElem.isContain($containerElem)) {\n            // 是编辑内容之内的\n            this._currentRange = range;\n        }\n    },\n\n    // 折叠选区\n    collapseRange: function collapseRange(toStart) {\n        if (toStart == null) {\n            // 默认为 false\n            toStart = false;\n        }\n        var range = this._currentRange;\n        if (range) {\n            range.collapse(toStart);\n        }\n    },\n\n    // 选中区域的文字\n    getSelectionText: function getSelectionText() {\n        var range = this._currentRange;\n        if (range) {\n            return this._currentRange.toString();\n        } else {\n            return '';\n        }\n    },\n\n    // 选区的 $Elem\n    getSelectionContainerElem: function getSelectionContainerElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.commonAncestorContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionStartElem: function getSelectionStartElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.startContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n    getSelectionEndElem: function getSelectionEndElem(range) {\n        range = range || this._currentRange;\n        var elem = void 0;\n        if (range) {\n            elem = range.endContainer;\n            return $(elem.nodeType === 1 ? elem : elem.parentNode);\n        }\n    },\n\n    // 选区是否为空\n    isSelectionEmpty: function isSelectionEmpty() {\n        var range = this._currentRange;\n        if (range && range.startContainer) {\n            if (range.startContainer === range.endContainer) {\n                if (range.startOffset === range.endOffset) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    // 恢复选区\n    restoreSelection: function restoreSelection() {\n        var selection = window.getSelection();\n        selection.removeAllRanges();\n        selection.addRange(this._currentRange);\n    },\n\n    // 创建一个空白（即 &#8203 字符）选区\n    createEmptyRange: function createEmptyRange() {\n        var editor = this.editor;\n        var range = this.getRange();\n        var $elem = void 0;\n\n        if (!range) {\n            // 当前无 range\n            return;\n        }\n        if (!this.isSelectionEmpty()) {\n            // 当前选区必须没有内容才可以\n            return;\n        }\n\n        try {\n            // 目前只支持 webkit 内核\n            if (UA.isWebkit()) {\n                // 插入 &#8203\n                editor.cmd.do('insertHTML', '&#8203;');\n                // 修改 offset 位置\n                range.setEnd(range.endContainer, range.endOffset + 1);\n                // 存储\n                this.saveRange(range);\n            } else {\n                $elem = $('<strong>&#8203;</strong>');\n                editor.cmd.do('insertElem', $elem);\n                this.createRangeByElem($elem, true);\n            }\n        } catch (ex) {\n            // 部分情况下会报错，兼容一下\n        }\n    },\n\n    // 根据 $Elem 设置选区\n    createRangeByElem: function createRangeByElem($elem, toStart, isContent) {\n        // $elem - 经过封装的 elem\n        // toStart - true 开始位置，false 结束位置\n        // isContent - 是否选中Elem的内容\n        if (!$elem.length) {\n            return;\n        }\n\n        var elem = $elem[0];\n        var range = document.createRange();\n\n        if (isContent) {\n            range.selectNodeContents(elem);\n        } else {\n            range.selectNode(elem);\n        }\n\n        if (typeof toStart === 'boolean') {\n            range.collapse(toStart);\n        }\n\n        // 存储 range\n        this.saveRange(range);\n    }\n};\n\n/*\n    上传进度条\n*/\n\nfunction Progress(editor) {\n    this.editor = editor;\n    this._time = 0;\n    this._isShow = false;\n    this._isRender = false;\n    this._timeoutId = 0;\n    this.$textContainer = editor.$textContainerElem;\n    this.$bar = $('<div class=\"w-e-progress\"></div>');\n}\n\nProgress.prototype = {\n    constructor: Progress,\n\n    show: function show(progress) {\n        var _this = this;\n\n        // 状态处理\n        if (this._isShow) {\n            return;\n        }\n        this._isShow = true;\n\n        // 渲染\n        var $bar = this.$bar;\n        if (!this._isRender) {\n            var $textContainer = this.$textContainer;\n            $textContainer.append($bar);\n        } else {\n            this._isRender = true;\n        }\n\n        // 改变进度（节流，100ms 渲染一次）\n        if (Date.now() - this._time > 100) {\n            if (progress <= 1) {\n                $bar.css('width', progress * 100 + '%');\n                this._time = Date.now();\n            }\n        }\n\n        // 隐藏\n        var timeoutId = this._timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(function () {\n            _this._hide();\n        }, 500);\n    },\n\n    _hide: function _hide() {\n        var $bar = this.$bar;\n        $bar.remove();\n\n        // 修改状态\n        this._time = 0;\n        this._isShow = false;\n        this._isRender = false;\n    }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n/*\n    上传图片\n*/\n\n// 构造函数\nfunction UploadImg(editor) {\n    this.editor = editor;\n}\n\n// 原型\nUploadImg.prototype = {\n    constructor: UploadImg,\n\n    // 根据 debug 弹出不同的信息\n    _alert: function _alert(alertInfo, debugInfo) {\n        var editor = this.editor;\n        var debug = editor.config.debug;\n        var customAlert = editor.config.customAlert;\n\n        if (debug) {\n            throw new Error('wangEditor: ' + (debugInfo || alertInfo));\n        } else {\n            if (customAlert && typeof customAlert === 'function') {\n                customAlert(alertInfo);\n            } else {\n                alert(alertInfo);\n            }\n        }\n    },\n\n    // 根据链接插入图片\n    insertLinkImg: function insertLinkImg(link) {\n        var _this2 = this;\n\n        if (!link) {\n            return;\n        }\n        var editor = this.editor;\n        var config = editor.config;\n\n        // 校验格式\n        var linkImgCheck = config.linkImgCheck;\n        var checkResult = void 0;\n        if (linkImgCheck && typeof linkImgCheck === 'function') {\n            checkResult = linkImgCheck(link);\n            if (typeof checkResult === 'string') {\n                // 校验失败，提示信息\n                alert(checkResult);\n                return;\n            }\n        }\n\n        editor.cmd.do('insertHTML', '<img src=\"' + link + '\" style=\"max-width:100%;\"/>');\n\n        // 验证图片 url 是否有效，无效的话给出提示\n        var img = document.createElement('img');\n        img.onload = function () {\n            var callback = config.linkImgCallback;\n            if (callback && typeof callback === 'function') {\n                callback(link);\n            }\n\n            img = null;\n        };\n        img.onerror = function () {\n            img = null;\n            // 无法成功下载图片\n            _this2._alert('插入图片错误', 'wangEditor: \\u63D2\\u5165\\u56FE\\u7247\\u51FA\\u9519\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\u662F \"' + link + '\"\\uFF0C\\u4E0B\\u8F7D\\u8BE5\\u94FE\\u63A5\\u5931\\u8D25');\n            return;\n        };\n        img.onabort = function () {\n            img = null;\n        };\n        img.src = link;\n    },\n\n    // 上传图片\n    uploadImg: function uploadImg(files) {\n        var _this3 = this;\n\n        if (!files || !files.length) {\n            return;\n        }\n\n        // ------------------------------ 获取配置信息 ------------------------------\n        var editor = this.editor;\n        var config = editor.config;\n        var uploadImgServer = config.uploadImgServer;\n        var uploadImgShowBase64 = config.uploadImgShowBase64;\n\n        var maxSize = config.uploadImgMaxSize;\n        var maxSizeM = maxSize / 1024 / 1024;\n        var maxLength = config.uploadImgMaxLength || 10000;\n        var uploadFileName = config.uploadFileName || '';\n        var uploadImgParams = config.uploadImgParams || {};\n        var uploadImgParamsWithUrl = config.uploadImgParamsWithUrl;\n        var uploadImgHeaders = config.uploadImgHeaders || {};\n        var hooks = config.uploadImgHooks || {};\n        var timeout = config.uploadImgTimeout || 3000;\n        var withCredentials = config.withCredentials;\n        if (withCredentials == null) {\n            withCredentials = false;\n        }\n        var customUploadImg = config.customUploadImg;\n\n        if (!customUploadImg) {\n            // 没有 customUploadImg 的情况下，需要如下两个配置才能继续进行图片上传\n            if (!uploadImgServer && !uploadImgShowBase64) {\n                return;\n            }\n        }\n\n        // ------------------------------ 验证文件信息 ------------------------------\n        var resultFiles = [];\n        var errInfo = [];\n        arrForEach(files, function (file) {\n            var name = file.name;\n            var size = file.size;\n\n            // chrome 低版本 name === undefined\n            if (!name || !size) {\n                return;\n            }\n\n            if (/\\.(jpg|jpeg|png|bmp|gif|webp)$/i.test(name) === false) {\n                // 后缀名不合法，不是图片\n                errInfo.push('\\u3010' + name + '\\u3011\\u4E0D\\u662F\\u56FE\\u7247');\n                return;\n            }\n            if (maxSize < size) {\n                // 上传图片过大\n                errInfo.push('\\u3010' + name + '\\u3011\\u5927\\u4E8E ' + maxSizeM + 'M');\n                return;\n            }\n\n            // 验证通过的加入结果列表\n            resultFiles.push(file);\n        });\n        // 抛出验证信息\n        if (errInfo.length) {\n            this._alert('图片验证未通过: \\n' + errInfo.join('\\n'));\n            return;\n        }\n        if (resultFiles.length > maxLength) {\n            this._alert('一次最多上传' + maxLength + '张图片');\n            return;\n        }\n\n        // ------------------------------ 自定义上传 ------------------------------\n        if (customUploadImg && typeof customUploadImg === 'function') {\n            customUploadImg(resultFiles, this.insertLinkImg.bind(this));\n\n            // 阻止以下代码执行\n            return;\n        }\n\n        // 添加图片数据\n        var formdata = new FormData();\n        arrForEach(resultFiles, function (file) {\n            var name = uploadFileName || file.name;\n            formdata.append(name, file);\n        });\n\n        // ------------------------------ 上传图片 ------------------------------\n        if (uploadImgServer && typeof uploadImgServer === 'string') {\n            // 添加参数\n            var uploadImgServerArr = uploadImgServer.split('#');\n            uploadImgServer = uploadImgServerArr[0];\n            var uploadImgServerHash = uploadImgServerArr[1] || '';\n            objForEach(uploadImgParams, function (key, val) {\n                // 因使用者反应，自定义参数不能默认 encode ，由 v3.1.1 版本开始注释掉\n                // val = encodeURIComponent(val)\n\n                // 第一，将参数拼接到 url 中\n                if (uploadImgParamsWithUrl) {\n                    if (uploadImgServer.indexOf('?') > 0) {\n                        uploadImgServer += '&';\n                    } else {\n                        uploadImgServer += '?';\n                    }\n                    uploadImgServer = uploadImgServer + key + '=' + val;\n                }\n\n                // 第二，将参数添加到 formdata 中\n                formdata.append(key, val);\n            });\n            if (uploadImgServerHash) {\n                uploadImgServer += '#' + uploadImgServerHash;\n            }\n\n            // 定义 xhr\n            var xhr = new XMLHttpRequest();\n            xhr.open('POST', uploadImgServer);\n\n            // 设置超时\n            xhr.timeout = timeout;\n            xhr.ontimeout = function () {\n                // hook - timeout\n                if (hooks.timeout && typeof hooks.timeout === 'function') {\n                    hooks.timeout(xhr, editor);\n                }\n\n                _this3._alert('上传图片超时');\n            };\n\n            // 监控 progress\n            if (xhr.upload) {\n                xhr.upload.onprogress = function (e) {\n                    var percent = void 0;\n                    // 进度条\n                    var progressBar = new Progress(editor);\n                    if (e.lengthComputable) {\n                        percent = e.loaded / e.total;\n                        progressBar.show(percent);\n                    }\n                };\n            }\n\n            // 返回数据\n            xhr.onreadystatechange = function () {\n                var result = void 0;\n                if (xhr.readyState === 4) {\n                    if (xhr.status < 200 || xhr.status >= 300) {\n                        // hook - error\n                        if (hooks.error && typeof hooks.error === 'function') {\n                            hooks.error(xhr, editor);\n                        }\n\n                        // xhr 返回状态错误\n                        _this3._alert('上传图片发生错误', '\\u4E0A\\u4F20\\u56FE\\u7247\\u53D1\\u751F\\u9519\\u8BEF\\uFF0C\\u670D\\u52A1\\u5668\\u8FD4\\u56DE\\u72B6\\u6001\\u662F ' + xhr.status);\n                        return;\n                    }\n\n                    result = xhr.responseText;\n                    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) !== 'object') {\n                        try {\n                            result = JSON.parse(result);\n                        } catch (ex) {\n                            // hook - fail\n                            if (hooks.fail && typeof hooks.fail === 'function') {\n                                hooks.fail(xhr, editor, result);\n                            }\n\n                            _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果是: ' + result);\n                            return;\n                        }\n                    }\n                    if (!hooks.customInsert && result.errno != '0') {\n                        // hook - fail\n                        if (hooks.fail && typeof hooks.fail === 'function') {\n                            hooks.fail(xhr, editor, result);\n                        }\n\n                        // 数据错误\n                        _this3._alert('上传图片失败', '上传图片返回结果错误，返回结果 errno=' + result.errno);\n                    } else {\n                        if (hooks.customInsert && typeof hooks.customInsert === 'function') {\n                            // 使用者自定义插入方法\n                            hooks.customInsert(_this3.insertLinkImg.bind(_this3), result, editor);\n                        } else {\n                            // 将图片插入编辑器\n                            var data = result.data || [];\n                            data.forEach(function (link) {\n                                _this3.insertLinkImg(link);\n                            });\n                        }\n\n                        // hook - success\n                        if (hooks.success && typeof hooks.success === 'function') {\n                            hooks.success(xhr, editor, result);\n                        }\n                    }\n                }\n            };\n\n            // hook - before\n            if (hooks.before && typeof hooks.before === 'function') {\n                var beforeResult = hooks.before(xhr, editor, resultFiles);\n                if (beforeResult && (typeof beforeResult === 'undefined' ? 'undefined' : _typeof(beforeResult)) === 'object') {\n                    if (beforeResult.prevent) {\n                        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                        this._alert(beforeResult.msg);\n                        return;\n                    }\n                }\n            }\n\n            // 自定义 headers\n            objForEach(uploadImgHeaders, function (key, val) {\n                xhr.setRequestHeader(key, val);\n            });\n\n            // 跨域传 cookie\n            xhr.withCredentials = withCredentials;\n\n            // 发送请求\n            xhr.send(formdata);\n\n            // 注意，要 return 。不去操作接下来的 base64 显示方式\n            return;\n        }\n\n        // ------------------------------ 显示 base64 格式 ------------------------------\n        if (uploadImgShowBase64) {\n            arrForEach(files, function (file) {\n                var _this = _this3;\n                var reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = function () {\n                    _this.insertLinkImg(this.result);\n                };\n            });\n        }\n    }\n};\n\n/*\n    编辑器构造函数\n*/\n\n// id，累加\nvar editorId = 1;\n\n// 构造函数\nfunction Editor(toolbarSelector, textSelector) {\n    if (toolbarSelector == null) {\n        // 没有传入任何参数，报错\n        throw new Error('错误：初始化编辑器时候未传入任何参数，请查阅文档');\n    }\n    // id，用以区分单个页面不同的编辑器对象\n    this.id = 'wangEditor-' + editorId++;\n\n    this.toolbarSelector = toolbarSelector;\n    this.textSelector = textSelector;\n\n    // 自定义配置\n    this.customConfig = {};\n}\n\n// 修改原型\nEditor.prototype = {\n    constructor: Editor,\n\n    // 初始化配置\n    _initConfig: function _initConfig() {\n        // _config 是默认配置，this.customConfig 是用户自定义配置，将它们 merge 之后再赋值\n        var target = {};\n        this.config = Object.assign(target, config, this.customConfig);\n\n        // 将语言配置，生成正则表达式\n        var langConfig = this.config.lang || {};\n        var langArgs = [];\n        objForEach(langConfig, function (key, val) {\n            // key 即需要生成正则表达式的规则，如“插入链接”\n            // val 即需要被替换成的语言，如“insert link”\n            langArgs.push({\n                reg: new RegExp(key, 'img'),\n                val: val\n\n            });\n        });\n        this.config.langArgs = langArgs;\n    },\n\n    // 初始化 DOM\n    _initDom: function _initDom() {\n        var _this = this;\n\n        var toolbarSelector = this.toolbarSelector;\n        var $toolbarSelector = $(toolbarSelector);\n        var textSelector = this.textSelector;\n\n        var config$$1 = this.config;\n        var zIndex = config$$1.zIndex;\n\n        // 定义变量\n        var $toolbarElem = void 0,\n            $textContainerElem = void 0,\n            $textElem = void 0,\n            $children = void 0;\n\n        if (textSelector == null) {\n            // 只传入一个参数，即是容器的选择器或元素，toolbar 和 text 的元素自行创建\n            $toolbarElem = $('<div></div>');\n            $textContainerElem = $('<div></div>');\n\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $toolbarSelector.children();\n\n            // 添加到 DOM 结构中\n            $toolbarSelector.append($toolbarElem).append($textContainerElem);\n\n            // 自行创建的，需要配置默认的样式\n            $toolbarElem.css('background-color', '#f1f1f1').css('border', '1px solid #ccc');\n            $textContainerElem.css('border', '1px solid #ccc').css('border-top', 'none').css('height', '300px');\n        } else {\n            // toolbar 和 text 的选择器都有值，记录属性\n            $toolbarElem = $toolbarSelector;\n            $textContainerElem = $(textSelector);\n            // 将编辑器区域原有的内容，暂存起来\n            $children = $textContainerElem.children();\n        }\n\n        // 编辑区域\n        $textElem = $('<div></div>');\n        $textElem.attr('contenteditable', 'true').css('width', '100%').css('height', '100%');\n\n        // 初始化编辑区域内容\n        if ($children && $children.length) {\n            $textElem.append($children);\n        } else {\n            $textElem.append($('<p><br></p>'));\n        }\n\n        // 编辑区域加入DOM\n        $textContainerElem.append($textElem);\n\n        // 设置通用的 class\n        $toolbarElem.addClass('w-e-toolbar');\n        $textContainerElem.addClass('w-e-text-container');\n        $textContainerElem.css('z-index', zIndex);\n        $textElem.addClass('w-e-text');\n\n        // 添加 ID\n        var toolbarElemId = getRandom('toolbar-elem');\n        $toolbarElem.attr('id', toolbarElemId);\n        var textElemId = getRandom('text-elem');\n        $textElem.attr('id', textElemId);\n\n        // 记录属性\n        this.$toolbarElem = $toolbarElem;\n        this.$textContainerElem = $textContainerElem;\n        this.$textElem = $textElem;\n        this.toolbarElemId = toolbarElemId;\n        this.textElemId = textElemId;\n\n        // 记录输入法的开始和结束\n        var compositionEnd = true;\n        $textContainerElem.on('compositionstart', function () {\n            // 输入法开始输入\n            compositionEnd = false;\n        });\n        $textContainerElem.on('compositionend', function () {\n            // 输入法结束输入\n            compositionEnd = true;\n        });\n\n        // 绑定 onchange\n        $textContainerElem.on('click keyup', function () {\n            // 输入法结束才出发 onchange\n            compositionEnd && _this.change && _this.change();\n        });\n        $toolbarElem.on('click', function () {\n            this.change && this.change();\n        });\n\n        //绑定 onfocus 与 onblur 事件\n        if (config$$1.onfocus || config$$1.onblur) {\n            // 当前编辑器是否是焦点状态\n            this.isFocus = false;\n\n            $(document).on('click', function (e) {\n                //判断当前点击元素是否在编辑器内\n                var isChild = $textElem.isContain($(e.target));\n\n                //判断当前点击元素是否为工具栏\n                var isToolbar = $toolbarElem.isContain($(e.target));\n                var isMenu = $toolbarElem[0] == e.target ? true : false;\n\n                if (!isChild) {\n                    //若为选择工具栏中的功能，则不视为成blur操作\n                    if (isToolbar && !isMenu) {\n                        return;\n                    }\n\n                    if (_this.isFocus) {\n                        _this.onblur && _this.onblur();\n                    }\n                    _this.isFocus = false;\n                } else {\n                    if (!_this.isFocus) {\n                        _this.onfocus && _this.onfocus();\n                    }\n                    _this.isFocus = true;\n                }\n            });\n        }\n    },\n\n    // 封装 command\n    _initCommand: function _initCommand() {\n        this.cmd = new Command(this);\n    },\n\n    // 封装 selection range API\n    _initSelectionAPI: function _initSelectionAPI() {\n        this.selection = new API(this);\n    },\n\n    // 添加图片上传\n    _initUploadImg: function _initUploadImg() {\n        this.uploadImg = new UploadImg(this);\n    },\n\n    // 初始化菜单\n    _initMenus: function _initMenus() {\n        this.menus = new Menus(this);\n        this.menus.init();\n    },\n\n    // 添加 text 区域\n    _initText: function _initText() {\n        this.txt = new Text(this);\n        this.txt.init();\n    },\n\n    // 初始化选区，将光标定位到内容尾部\n    initSelection: function initSelection(newLine) {\n        var $textElem = this.$textElem;\n        var $children = $textElem.children();\n        if (!$children.length) {\n            // 如果编辑器区域无内容，添加一个空行，重新设置选区\n            $textElem.append($('<p><br></p>'));\n            this.initSelection();\n            return;\n        }\n\n        var $last = $children.last();\n\n        if (newLine) {\n            // 新增一个空行\n            var html = $last.html().toLowerCase();\n            var nodeName = $last.getNodeName();\n            if (html !== '<br>' && html !== '<br\\/>' || nodeName !== 'P') {\n                // 最后一个元素不是 <p><br></p>，添加一个空行，重新设置选区\n                $textElem.append($('<p><br></p>'));\n                this.initSelection();\n                return;\n            }\n        }\n\n        this.selection.createRangeByElem($last, false, true);\n        this.selection.restoreSelection();\n    },\n\n    // 绑定事件\n    _bindEvent: function _bindEvent() {\n        // -------- 绑定 onchange 事件 --------\n        var onChangeTimeoutId = 0;\n        var beforeChangeHtml = this.txt.html();\n        var config$$1 = this.config;\n\n        // onchange 触发延迟时间\n        var onchangeTimeout = config$$1.onchangeTimeout;\n        onchangeTimeout = parseInt(onchangeTimeout, 10);\n        if (!onchangeTimeout || onchangeTimeout <= 0) {\n            onchangeTimeout = 200;\n        }\n\n        var onchange = config$$1.onchange;\n        if (onchange && typeof onchange === 'function') {\n            // 触发 change 的有三个场景：\n            // 1. $textContainerElem.on('click keyup')\n            // 2. $toolbarElem.on('click')\n            // 3. editor.cmd.do()\n            this.change = function () {\n                // 判断是否有变化\n                var currentHtml = this.txt.html();\n\n                if (currentHtml.length === beforeChangeHtml.length) {\n                    // 需要比较每一个字符\n                    if (currentHtml === beforeChangeHtml) {\n                        return;\n                    }\n                }\n\n                // 执行，使用节流\n                if (onChangeTimeoutId) {\n                    clearTimeout(onChangeTimeoutId);\n                }\n                onChangeTimeoutId = setTimeout(function () {\n                    // 触发配置的 onchange 函数\n                    onchange(currentHtml);\n                    beforeChangeHtml = currentHtml;\n                }, onchangeTimeout);\n            };\n        }\n\n        // -------- 绑定 onblur 事件 --------\n        var onblur = config$$1.onblur;\n        if (onblur && typeof onblur === 'function') {\n            this.onblur = function () {\n                var currentHtml = this.txt.html();\n                onblur(currentHtml);\n            };\n        }\n\n        // -------- 绑定 onfocus 事件 --------\n        var onfocus = config$$1.onfocus;\n        if (onfocus && typeof onfocus === 'function') {\n            this.onfocus = function () {\n                onfocus();\n            };\n        }\n    },\n\n    // 创建编辑器\n    create: function create() {\n        // 初始化配置信息\n        this._initConfig();\n\n        // 初始化 DOM\n        this._initDom();\n\n        // 封装 command API\n        this._initCommand();\n\n        // 封装 selection range API\n        this._initSelectionAPI();\n\n        // 添加 text\n        this._initText();\n\n        // 初始化菜单\n        this._initMenus();\n\n        // 添加 图片上传\n        this._initUploadImg();\n\n        // 初始化选区，将光标定位到内容尾部\n        this.initSelection(true);\n\n        // 绑定事件\n        this._bindEvent();\n    },\n\n    // 解绑所有事件（暂时不对外开放）\n    _offAllEvent: function _offAllEvent() {\n        $.offAll();\n    }\n};\n\n// 检验是否浏览器环境\ntry {\n    document;\n} catch (ex) {\n    throw new Error('请在浏览器环境下运行');\n}\n\n// polyfill\npolyfill();\n\n// 这里的 `inlinecss` 将被替换成 css 代码的内容，详情可去 ./gulpfile.js 中搜索 `inlinecss` 关键字\nvar inlinecss = '.w-e-toolbar,.w-e-text-container,.w-e-menu-panel {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-toolbar *,.w-e-text-container *,.w-e-menu-panel * {  padding: 0;  margin: 0;  box-sizing: border-box;}.w-e-clear-fix:after {  content: \"\";  display: table;  clear: both;}.w-e-toolbar .w-e-droplist {  position: absolute;  left: 0;  top: 0;  background-color: #fff;  border: 1px solid #f1f1f1;  border-right-color: #ccc;  border-bottom-color: #ccc;}.w-e-toolbar .w-e-droplist .w-e-dp-title {  text-align: center;  color: #999;  line-height: 2;  border-bottom: 1px solid #f1f1f1;  font-size: 13px;}.w-e-toolbar .w-e-droplist ul.w-e-list {  list-style: none;  line-height: 1;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item {  color: #333;  padding: 5px 0;}.w-e-toolbar .w-e-droplist ul.w-e-list li.w-e-item:hover {  background-color: #f1f1f1;}.w-e-toolbar .w-e-droplist ul.w-e-block {  list-style: none;  text-align: left;  padding: 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item {  display: inline-block;  *display: inline;  *zoom: 1;  padding: 3px 5px;}.w-e-toolbar .w-e-droplist ul.w-e-block li.w-e-item:hover {  background-color: #f1f1f1;}@font-face {  font-family: \\'w-e-icon\\';  src: url(data:application/x-font-woff;charset=utf-8;base64,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) format(\\'truetype\\');  font-weight: normal;  font-style: normal;}[class^=\"w-e-icon-\"],[class*=\" w-e-icon-\"] {  /* use !important to prevent issues with browser extensions that change fonts */  font-family: \\'w-e-icon\\' !important;  speak: none;  font-style: normal;  font-weight: normal;  font-variant: normal;  text-transform: none;  line-height: 1;  /* Better Font Rendering =========== */  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}.w-e-icon-close:before {  content: \"\\\\f00d\";}.w-e-icon-upload2:before {  content: \"\\\\e9c6\";}.w-e-icon-trash-o:before {  content: \"\\\\f014\";}.w-e-icon-header:before {  content: \"\\\\f1dc\";}.w-e-icon-pencil2:before {  content: \"\\\\e906\";}.w-e-icon-paint-brush:before {  content: \"\\\\f1fc\";}.w-e-icon-image:before {  content: \"\\\\e90d\";}.w-e-icon-play:before {  content: \"\\\\e912\";}.w-e-icon-location:before {  content: \"\\\\e947\";}.w-e-icon-undo:before {  content: \"\\\\e965\";}.w-e-icon-redo:before {  content: \"\\\\e966\";}.w-e-icon-quotes-left:before {  content: \"\\\\e977\";}.w-e-icon-list-numbered:before {  content: \"\\\\e9b9\";}.w-e-icon-list2:before {  content: \"\\\\e9bb\";}.w-e-icon-link:before {  content: \"\\\\e9cb\";}.w-e-icon-happy:before {  content: \"\\\\e9df\";}.w-e-icon-bold:before {  content: \"\\\\ea62\";}.w-e-icon-underline:before {  content: \"\\\\ea63\";}.w-e-icon-italic:before {  content: \"\\\\ea64\";}.w-e-icon-strikethrough:before {  content: \"\\\\ea65\";}.w-e-icon-table2:before {  content: \"\\\\ea71\";}.w-e-icon-paragraph-left:before {  content: \"\\\\ea77\";}.w-e-icon-paragraph-center:before {  content: \"\\\\ea78\";}.w-e-icon-paragraph-right:before {  content: \"\\\\ea79\";}.w-e-icon-terminal:before {  content: \"\\\\f120\";}.w-e-icon-page-break:before {  content: \"\\\\ea68\";}.w-e-icon-cancel-circle:before {  content: \"\\\\ea0d\";}.w-e-icon-font:before {  content: \"\\\\ea5c\";}.w-e-icon-text-heigh:before {  content: \"\\\\ea5f\";}.w-e-toolbar {  display: -webkit-box;  display: -ms-flexbox;  display: flex;  padding: 0 5px;  /* flex-wrap: wrap; */  /* 单个菜单 */}.w-e-toolbar .w-e-menu {  position: relative;  text-align: center;  padding: 5px 10px;  cursor: pointer;}.w-e-toolbar .w-e-menu i {  color: #999;}.w-e-toolbar .w-e-menu:hover i {  color: #333;}.w-e-toolbar .w-e-active i {  color: #1e88e5;}.w-e-toolbar .w-e-active:hover i {  color: #1e88e5;}.w-e-text-container .w-e-panel-container {  position: absolute;  top: 0;  left: 50%;  border: 1px solid #ccc;  border-top: 0;  box-shadow: 1px 1px 2px #ccc;  color: #333;  background-color: #fff;  /* 为 emotion panel 定制的样式 */  /* 上传图片的 panel 定制样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-close {  position: absolute;  right: 0;  top: 0;  padding: 5px;  margin: 2px 5px 0 0;  cursor: pointer;  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-close:hover {  color: #333;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title {  list-style: none;  display: -webkit-box;  display: -ms-flexbox;  display: flex;  font-size: 14px;  margin: 2px 10px 0 10px;  border-bottom: 1px solid #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-item {  padding: 3px 5px;  color: #999;  cursor: pointer;  margin: 0 3px;  position: relative;  top: 1px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-title .w-e-active {  color: #333;  border-bottom: 1px solid #333;  cursor: default;  font-weight: 700;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content {  padding: 10px 15px 10px 15px;  font-size: 16px;  /* 输入框的样式 */  /* 按钮的样式 */}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus,.w-e-text-container .w-e-panel-container .w-e-panel-tab-content button:focus {  outline: none;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea {  width: 100%;  border: 1px solid #ccc;  padding: 5px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content textarea:focus {  border-color: #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text] {  border: none;  border-bottom: 1px solid #ccc;  font-size: 14px;  height: 20px;  color: #333;  text-align: left;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].small {  width: 30px;  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text].block {  display: block;  width: 100%;  margin: 10px 0;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content input[type=text]:focus {  border-bottom: 2px solid #1e88e5;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button {  font-size: 14px;  color: #1e88e5;  border: none;  padding: 5px 10px;  background-color: #fff;  cursor: pointer;  border-radius: 3px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.left {  float: left;  margin-right: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.right {  float: right;  margin-left: 10px;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.gray {  color: #999;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button.red {  color: #c24f4a;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container button:hover {  background-color: #f1f1f1;}.w-e-text-container .w-e-panel-container .w-e-panel-tab-content .w-e-button-container:after {  content: \"\";  display: table;  clear: both;}.w-e-text-container .w-e-panel-container .w-e-emoticon-container .w-e-item {  cursor: pointer;  font-size: 18px;  padding: 0 3px;  display: inline-block;  *display: inline;  *zoom: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container {  text-align: center;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn {  display: inline-block;  *display: inline;  *zoom: 1;  color: #999;  cursor: pointer;  font-size: 60px;  line-height: 1;}.w-e-text-container .w-e-panel-container .w-e-up-img-container .w-e-up-btn:hover {  color: #333;}.w-e-text-container {  position: relative;}.w-e-text-container .w-e-progress {  position: absolute;  background-color: #1e88e5;  bottom: 0;  left: 0;  height: 1px;}.w-e-text {  padding: 0 10px;  overflow-y: scroll;}.w-e-text p,.w-e-text h1,.w-e-text h2,.w-e-text h3,.w-e-text h4,.w-e-text h5,.w-e-text table,.w-e-text pre {  margin: 10px 0;  line-height: 1.5;}.w-e-text ul,.w-e-text ol {  margin: 10px 0 10px 20px;}.w-e-text blockquote {  display: block;  border-left: 8px solid #d0e5f2;  padding: 5px 10px;  margin: 10px 0;  line-height: 1.4;  font-size: 100%;  background-color: #f1f1f1;}.w-e-text code {  display: inline-block;  *display: inline;  *zoom: 1;  background-color: #f1f1f1;  border-radius: 3px;  padding: 3px 5px;  margin: 0 3px;}.w-e-text pre code {  display: block;}.w-e-text table {  border-top: 1px solid #ccc;  border-left: 1px solid #ccc;}.w-e-text table td,.w-e-text table th {  border-bottom: 1px solid #ccc;  border-right: 1px solid #ccc;  padding: 3px 5px;}.w-e-text table th {  border-bottom: 2px solid #ccc;  text-align: center;}.w-e-text:focus {  outline: none;}.w-e-text img {  cursor: pointer;}.w-e-text img:hover {  box-shadow: 0 0 5px #333;}';\n\n// 将 css 代码添加到 <style> 中\nvar style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = inlinecss;\ndocument.getElementsByTagName('HEAD').item(0).appendChild(style);\n\n// 返回\nvar index = window.wangEditor || Editor;\n\nreturn index;\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wangeditor/release/wangEditor.js\n// module id = sYY+\n// module chunks = 4 5"],"sourceRoot":""}